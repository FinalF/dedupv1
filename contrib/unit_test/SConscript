from os.path import join, basename
import glob
import os
import sys
import re

project = "dedupv1_contrib_test"

Import("env", "build_mode")

localenv = env.Clone()
Export("localenv")

localenv["CPPFLAGS"].append("-DDEDUPV1_TEST")
localenv["LIBS"].append("gtest")

dedupv1_core_obj = localenv.SConscript("#core/src/SConscript", variant_dir = join("dedupv1_core_obj"))   
dedupv1_core_shared_test_obj = localenv.SConscript("#core/shared_test/SConscript", variant_dir = join("dedupv1_core_shared_test_obj"))
dedupv1_core_pb_obj = localenv.SConscript("#core/resources/SConscript", variant_dir = join("dedupv1_pb_obj"))
dedupv1_base_obj = localenv.SConscript("#base/src/SConscript", variant_dir = join("dedupv1_base_obj"))   
dedupv1_base_pb_obj = localenv.SConscript("#base/resources/SConscript", variant_dir = join("dedupv1_base_pb_obj"))
dedupv1_base_shared_test_obj = localenv.SConscript("#base/shared_test/SConscript", variant_dir = join("dedupv1_base_shared_test_obj"))
dedupv1d_obj = localenv.SConscript("#dedupv1d/src/SConscript", variant_dir = join("dedupv1d_obj"))   
dedupv1d_pb_obj = localenv.SConscript("#dedupv1d/resources/SConscript", variant_dir = join("dedupv1d_pb_obj"))

dedupv1_obj = [dedupv1_base_obj, dedupv1_base_pb_obj, dedupv1_core_obj, dedupv1_core_pb_obj, dedupv1d_obj, dedupv1d_pb_obj]
dedupv1_includes = ["#core/include", "#core/resources", "#base/include", "#base/resources", "#dedupv1d/include", "#dedupv1d/resources"]

dedupv1_contrib_test_src = Glob("*.cc")
dedupv1_contrib_src = [f for f in Glob("#contrib/*/src/*.cc") if not f.name.endswith("_app.cc")]

def has_main_function(contents):
	return re.match(".*main\(.*\).*", contents)

if any([has_main_function(f.get_contents()) for f in dedupv1_contrib_src]):
	print "Double main method. The main method of a contrib tool should be in a file ending in _app.cc"
	sys.exit(1)

prog = localenv.Program(project, 
                source = dedupv1_contrib_test_src + dedupv1_contrib_src +
                	dedupv1_obj + dedupv1_core_shared_test_obj + 
                	dedupv1_base_shared_test_obj, 
                CPPPATH = localenv["CPPPATH"] + Glob("#contrib/*/src") + dedupv1_includes,
                 )
                 
localenv.Alias("all", project)
localenv.Alias("test", project)
localenv.Alias(project, prog)
