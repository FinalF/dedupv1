// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dedupv1d_stats.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CommandHandlerStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandHandlerStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandHandlerOpcodeStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandHandlerOpcodeStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandHandlerTaskMgmtStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandHandlerTaskMgmtStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandHandlerErrorStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandHandlerErrorStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dedupv1dStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dedupv1dStatsData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dedupv1d_5fstats_2eproto() {
  protobuf_AddDesc_dedupv1d_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dedupv1d_stats.proto");
  GOOGLE_CHECK(file != NULL);
  CommandHandlerStatsData_descriptor_ = file->message_type(0);
  static const int CommandHandlerStatsData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, scsi_command_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, opcode_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, task_mgmt_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, error_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, sector_read_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, sector_write_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, retry_count_),
  };
  CommandHandlerStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandHandlerStatsData_descriptor_,
      CommandHandlerStatsData::default_instance_,
      CommandHandlerStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandHandlerStatsData));
  CommandHandlerOpcodeStatsData_descriptor_ = file->message_type(1);
  static const int CommandHandlerOpcodeStatsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerOpcodeStatsData, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerOpcodeStatsData, count_),
  };
  CommandHandlerOpcodeStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandHandlerOpcodeStatsData_descriptor_,
      CommandHandlerOpcodeStatsData::default_instance_,
      CommandHandlerOpcodeStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerOpcodeStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerOpcodeStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandHandlerOpcodeStatsData));
  CommandHandlerTaskMgmtStatsData_descriptor_ = file->message_type(2);
  static const int CommandHandlerTaskMgmtStatsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerTaskMgmtStatsData, tmcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerTaskMgmtStatsData, count_),
  };
  CommandHandlerTaskMgmtStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandHandlerTaskMgmtStatsData_descriptor_,
      CommandHandlerTaskMgmtStatsData::default_instance_,
      CommandHandlerTaskMgmtStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerTaskMgmtStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerTaskMgmtStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandHandlerTaskMgmtStatsData));
  CommandHandlerErrorStatsData_descriptor_ = file->message_type(3);
  static const int CommandHandlerErrorStatsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerErrorStatsData, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerErrorStatsData, count_),
  };
  CommandHandlerErrorStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandHandlerErrorStatsData_descriptor_,
      CommandHandlerErrorStatsData::default_instance_,
      CommandHandlerErrorStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerErrorStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHandlerErrorStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandHandlerErrorStatsData));
  Dedupv1dStatsData_descriptor_ = file->message_type(4);
  static const int Dedupv1dStatsData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dedupv1dStatsData, service_time_),
  };
  Dedupv1dStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dedupv1dStatsData_descriptor_,
      Dedupv1dStatsData::default_instance_,
      Dedupv1dStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dedupv1dStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dedupv1dStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dedupv1dStatsData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dedupv1d_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandHandlerStatsData_descriptor_, &CommandHandlerStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandHandlerOpcodeStatsData_descriptor_, &CommandHandlerOpcodeStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandHandlerTaskMgmtStatsData_descriptor_, &CommandHandlerTaskMgmtStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandHandlerErrorStatsData_descriptor_, &CommandHandlerErrorStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dedupv1dStatsData_descriptor_, &Dedupv1dStatsData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dedupv1d_5fstats_2eproto() {
  delete CommandHandlerStatsData::default_instance_;
  delete CommandHandlerStatsData_reflection_;
  delete CommandHandlerOpcodeStatsData::default_instance_;
  delete CommandHandlerOpcodeStatsData_reflection_;
  delete CommandHandlerTaskMgmtStatsData::default_instance_;
  delete CommandHandlerTaskMgmtStatsData_reflection_;
  delete CommandHandlerErrorStatsData::default_instance_;
  delete CommandHandlerErrorStatsData_reflection_;
  delete Dedupv1dStatsData::default_instance_;
  delete Dedupv1dStatsData_reflection_;
}

void protobuf_AddDesc_dedupv1d_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024dedupv1d_stats.proto\"\246\002\n\027CommandHandle"
    "rStatsData\022\032\n\022scsi_command_count\030\001 \001(\004\0224"
    "\n\014opcode_stats\030\002 \003(\0132\036.CommandHandlerOpc"
    "odeStatsData\0229\n\017task_mgmt_stats\030\003 \003(\0132 ."
    "CommandHandlerTaskMgmtStatsData\0222\n\013error"
    "_stats\030\004 \003(\0132\035.CommandHandlerErrorStatsD"
    "ata\022\031\n\021sector_read_count\030\005 \001(\004\022\032\n\022sector"
    "_write_count\030\006 \001(\004\022\023\n\013retry_count\030\007 \001(\004\""
    ">\n\035CommandHandlerOpcodeStatsData\022\016\n\006opco"
    "de\030\001 \001(\005\022\r\n\005count\030\002 \001(\004\"@\n\037CommandHandle"
    "rTaskMgmtStatsData\022\016\n\006tmcode\030\001 \001(\005\022\r\n\005co"
    "unt\030\002 \001(\004\"=\n\034CommandHandlerErrorStatsDat"
    "a\022\016\n\006opcode\030\001 \001(\005\022\r\n\005count\030\002 \001(\004\")\n\021Dedu"
    "pv1dStatsData\022\024\n\014service_time\030\001 \001(\001", 555);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dedupv1d_stats.proto", &protobuf_RegisterTypes);
  CommandHandlerStatsData::default_instance_ = new CommandHandlerStatsData();
  CommandHandlerOpcodeStatsData::default_instance_ = new CommandHandlerOpcodeStatsData();
  CommandHandlerTaskMgmtStatsData::default_instance_ = new CommandHandlerTaskMgmtStatsData();
  CommandHandlerErrorStatsData::default_instance_ = new CommandHandlerErrorStatsData();
  Dedupv1dStatsData::default_instance_ = new Dedupv1dStatsData();
  CommandHandlerStatsData::default_instance_->InitAsDefaultInstance();
  CommandHandlerOpcodeStatsData::default_instance_->InitAsDefaultInstance();
  CommandHandlerTaskMgmtStatsData::default_instance_->InitAsDefaultInstance();
  CommandHandlerErrorStatsData::default_instance_->InitAsDefaultInstance();
  Dedupv1dStatsData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dedupv1d_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dedupv1d_5fstats_2eproto {
  StaticDescriptorInitializer_dedupv1d_5fstats_2eproto() {
    protobuf_AddDesc_dedupv1d_5fstats_2eproto();
  }
} static_descriptor_initializer_dedupv1d_5fstats_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CommandHandlerStatsData::kScsiCommandCountFieldNumber;
const int CommandHandlerStatsData::kOpcodeStatsFieldNumber;
const int CommandHandlerStatsData::kTaskMgmtStatsFieldNumber;
const int CommandHandlerStatsData::kErrorStatsFieldNumber;
const int CommandHandlerStatsData::kSectorReadCountFieldNumber;
const int CommandHandlerStatsData::kSectorWriteCountFieldNumber;
const int CommandHandlerStatsData::kRetryCountFieldNumber;
#endif  // !_MSC_VER

CommandHandlerStatsData::CommandHandlerStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandHandlerStatsData::InitAsDefaultInstance() {
}

CommandHandlerStatsData::CommandHandlerStatsData(const CommandHandlerStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandHandlerStatsData::SharedCtor() {
  _cached_size_ = 0;
  scsi_command_count_ = GOOGLE_ULONGLONG(0);
  sector_read_count_ = GOOGLE_ULONGLONG(0);
  sector_write_count_ = GOOGLE_ULONGLONG(0);
  retry_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandHandlerStatsData::~CommandHandlerStatsData() {
  SharedDtor();
}

void CommandHandlerStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandHandlerStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandHandlerStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandHandlerStatsData_descriptor_;
}

const CommandHandlerStatsData& CommandHandlerStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1d_5fstats_2eproto();  return *default_instance_;
}

CommandHandlerStatsData* CommandHandlerStatsData::default_instance_ = NULL;

CommandHandlerStatsData* CommandHandlerStatsData::New() const {
  return new CommandHandlerStatsData;
}

void CommandHandlerStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scsi_command_count_ = GOOGLE_ULONGLONG(0);
    sector_read_count_ = GOOGLE_ULONGLONG(0);
    sector_write_count_ = GOOGLE_ULONGLONG(0);
    retry_count_ = GOOGLE_ULONGLONG(0);
  }
  opcode_stats_.Clear();
  task_mgmt_stats_.Clear();
  error_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandHandlerStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scsi_command_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scsi_command_count_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opcode_stats;
        break;
      }
      
      // repeated .CommandHandlerOpcodeStatsData opcode_stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opcode_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opcode_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opcode_stats;
        if (input->ExpectTag(26)) goto parse_task_mgmt_stats;
        break;
      }
      
      // repeated .CommandHandlerTaskMgmtStatsData task_mgmt_stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_mgmt_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_mgmt_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_mgmt_stats;
        if (input->ExpectTag(34)) goto parse_error_stats;
        break;
      }
      
      // repeated .CommandHandlerErrorStatsData error_stats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_error_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_error_stats;
        if (input->ExpectTag(40)) goto parse_sector_read_count;
        break;
      }
      
      // optional uint64 sector_read_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sector_read_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sector_read_count_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sector_write_count;
        break;
      }
      
      // optional uint64 sector_write_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sector_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sector_write_count_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_retry_count;
        break;
      }
      
      // optional uint64 retry_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retry_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &retry_count_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandHandlerStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 scsi_command_count = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scsi_command_count(), output);
  }
  
  // repeated .CommandHandlerOpcodeStatsData opcode_stats = 2;
  for (int i = 0; i < this->opcode_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->opcode_stats(i), output);
  }
  
  // repeated .CommandHandlerTaskMgmtStatsData task_mgmt_stats = 3;
  for (int i = 0; i < this->task_mgmt_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->task_mgmt_stats(i), output);
  }
  
  // repeated .CommandHandlerErrorStatsData error_stats = 4;
  for (int i = 0; i < this->error_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->error_stats(i), output);
  }
  
  // optional uint64 sector_read_count = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sector_read_count(), output);
  }
  
  // optional uint64 sector_write_count = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sector_write_count(), output);
  }
  
  // optional uint64 retry_count = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->retry_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandHandlerStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 scsi_command_count = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scsi_command_count(), target);
  }
  
  // repeated .CommandHandlerOpcodeStatsData opcode_stats = 2;
  for (int i = 0; i < this->opcode_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->opcode_stats(i), target);
  }
  
  // repeated .CommandHandlerTaskMgmtStatsData task_mgmt_stats = 3;
  for (int i = 0; i < this->task_mgmt_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->task_mgmt_stats(i), target);
  }
  
  // repeated .CommandHandlerErrorStatsData error_stats = 4;
  for (int i = 0; i < this->error_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->error_stats(i), target);
  }
  
  // optional uint64 sector_read_count = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sector_read_count(), target);
  }
  
  // optional uint64 sector_write_count = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sector_write_count(), target);
  }
  
  // optional uint64 retry_count = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->retry_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandHandlerStatsData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 scsi_command_count = 1;
    if (has_scsi_command_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scsi_command_count());
    }
    
    // optional uint64 sector_read_count = 5;
    if (has_sector_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sector_read_count());
    }
    
    // optional uint64 sector_write_count = 6;
    if (has_sector_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sector_write_count());
    }
    
    // optional uint64 retry_count = 7;
    if (has_retry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->retry_count());
    }
    
  }
  // repeated .CommandHandlerOpcodeStatsData opcode_stats = 2;
  total_size += 1 * this->opcode_stats_size();
  for (int i = 0; i < this->opcode_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opcode_stats(i));
  }
  
  // repeated .CommandHandlerTaskMgmtStatsData task_mgmt_stats = 3;
  total_size += 1 * this->task_mgmt_stats_size();
  for (int i = 0; i < this->task_mgmt_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_mgmt_stats(i));
  }
  
  // repeated .CommandHandlerErrorStatsData error_stats = 4;
  total_size += 1 * this->error_stats_size();
  for (int i = 0; i < this->error_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->error_stats(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandHandlerStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandHandlerStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandHandlerStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandHandlerStatsData::MergeFrom(const CommandHandlerStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  opcode_stats_.MergeFrom(from.opcode_stats_);
  task_mgmt_stats_.MergeFrom(from.task_mgmt_stats_);
  error_stats_.MergeFrom(from.error_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_scsi_command_count(from.scsi_command_count());
    }
    if (from._has_bit(4)) {
      set_sector_read_count(from.sector_read_count());
    }
    if (from._has_bit(5)) {
      set_sector_write_count(from.sector_write_count());
    }
    if (from._has_bit(6)) {
      set_retry_count(from.retry_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandHandlerStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandHandlerStatsData::CopyFrom(const CommandHandlerStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHandlerStatsData::IsInitialized() const {
  
  return true;
}

void CommandHandlerStatsData::Swap(CommandHandlerStatsData* other) {
  if (other != this) {
    std::swap(scsi_command_count_, other->scsi_command_count_);
    opcode_stats_.Swap(&other->opcode_stats_);
    task_mgmt_stats_.Swap(&other->task_mgmt_stats_);
    error_stats_.Swap(&other->error_stats_);
    std::swap(sector_read_count_, other->sector_read_count_);
    std::swap(sector_write_count_, other->sector_write_count_);
    std::swap(retry_count_, other->retry_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandHandlerStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandHandlerStatsData_descriptor_;
  metadata.reflection = CommandHandlerStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandHandlerOpcodeStatsData::kOpcodeFieldNumber;
const int CommandHandlerOpcodeStatsData::kCountFieldNumber;
#endif  // !_MSC_VER

CommandHandlerOpcodeStatsData::CommandHandlerOpcodeStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandHandlerOpcodeStatsData::InitAsDefaultInstance() {
}

CommandHandlerOpcodeStatsData::CommandHandlerOpcodeStatsData(const CommandHandlerOpcodeStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandHandlerOpcodeStatsData::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandHandlerOpcodeStatsData::~CommandHandlerOpcodeStatsData() {
  SharedDtor();
}

void CommandHandlerOpcodeStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandHandlerOpcodeStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandHandlerOpcodeStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandHandlerOpcodeStatsData_descriptor_;
}

const CommandHandlerOpcodeStatsData& CommandHandlerOpcodeStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1d_5fstats_2eproto();  return *default_instance_;
}

CommandHandlerOpcodeStatsData* CommandHandlerOpcodeStatsData::default_instance_ = NULL;

CommandHandlerOpcodeStatsData* CommandHandlerOpcodeStatsData::New() const {
  return new CommandHandlerOpcodeStatsData;
}

void CommandHandlerOpcodeStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandHandlerOpcodeStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandHandlerOpcodeStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }
  
  // optional uint64 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandHandlerOpcodeStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }
  
  // optional uint64 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandHandlerOpcodeStatsData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }
    
    // optional uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandHandlerOpcodeStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandHandlerOpcodeStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandHandlerOpcodeStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandHandlerOpcodeStatsData::MergeFrom(const CommandHandlerOpcodeStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_opcode(from.opcode());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandHandlerOpcodeStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandHandlerOpcodeStatsData::CopyFrom(const CommandHandlerOpcodeStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHandlerOpcodeStatsData::IsInitialized() const {
  
  return true;
}

void CommandHandlerOpcodeStatsData::Swap(CommandHandlerOpcodeStatsData* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandHandlerOpcodeStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandHandlerOpcodeStatsData_descriptor_;
  metadata.reflection = CommandHandlerOpcodeStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandHandlerTaskMgmtStatsData::kTmcodeFieldNumber;
const int CommandHandlerTaskMgmtStatsData::kCountFieldNumber;
#endif  // !_MSC_VER

CommandHandlerTaskMgmtStatsData::CommandHandlerTaskMgmtStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandHandlerTaskMgmtStatsData::InitAsDefaultInstance() {
}

CommandHandlerTaskMgmtStatsData::CommandHandlerTaskMgmtStatsData(const CommandHandlerTaskMgmtStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandHandlerTaskMgmtStatsData::SharedCtor() {
  _cached_size_ = 0;
  tmcode_ = 0;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandHandlerTaskMgmtStatsData::~CommandHandlerTaskMgmtStatsData() {
  SharedDtor();
}

void CommandHandlerTaskMgmtStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandHandlerTaskMgmtStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandHandlerTaskMgmtStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandHandlerTaskMgmtStatsData_descriptor_;
}

const CommandHandlerTaskMgmtStatsData& CommandHandlerTaskMgmtStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1d_5fstats_2eproto();  return *default_instance_;
}

CommandHandlerTaskMgmtStatsData* CommandHandlerTaskMgmtStatsData::default_instance_ = NULL;

CommandHandlerTaskMgmtStatsData* CommandHandlerTaskMgmtStatsData::New() const {
  return new CommandHandlerTaskMgmtStatsData;
}

void CommandHandlerTaskMgmtStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmcode_ = 0;
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandHandlerTaskMgmtStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tmcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmcode_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandHandlerTaskMgmtStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tmcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tmcode(), output);
  }
  
  // optional uint64 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandHandlerTaskMgmtStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tmcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tmcode(), target);
  }
  
  // optional uint64 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandHandlerTaskMgmtStatsData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tmcode = 1;
    if (has_tmcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmcode());
    }
    
    // optional uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandHandlerTaskMgmtStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandHandlerTaskMgmtStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandHandlerTaskMgmtStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandHandlerTaskMgmtStatsData::MergeFrom(const CommandHandlerTaskMgmtStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tmcode(from.tmcode());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandHandlerTaskMgmtStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandHandlerTaskMgmtStatsData::CopyFrom(const CommandHandlerTaskMgmtStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHandlerTaskMgmtStatsData::IsInitialized() const {
  
  return true;
}

void CommandHandlerTaskMgmtStatsData::Swap(CommandHandlerTaskMgmtStatsData* other) {
  if (other != this) {
    std::swap(tmcode_, other->tmcode_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandHandlerTaskMgmtStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandHandlerTaskMgmtStatsData_descriptor_;
  metadata.reflection = CommandHandlerTaskMgmtStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandHandlerErrorStatsData::kOpcodeFieldNumber;
const int CommandHandlerErrorStatsData::kCountFieldNumber;
#endif  // !_MSC_VER

CommandHandlerErrorStatsData::CommandHandlerErrorStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandHandlerErrorStatsData::InitAsDefaultInstance() {
}

CommandHandlerErrorStatsData::CommandHandlerErrorStatsData(const CommandHandlerErrorStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandHandlerErrorStatsData::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandHandlerErrorStatsData::~CommandHandlerErrorStatsData() {
  SharedDtor();
}

void CommandHandlerErrorStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandHandlerErrorStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandHandlerErrorStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandHandlerErrorStatsData_descriptor_;
}

const CommandHandlerErrorStatsData& CommandHandlerErrorStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1d_5fstats_2eproto();  return *default_instance_;
}

CommandHandlerErrorStatsData* CommandHandlerErrorStatsData::default_instance_ = NULL;

CommandHandlerErrorStatsData* CommandHandlerErrorStatsData::New() const {
  return new CommandHandlerErrorStatsData;
}

void CommandHandlerErrorStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandHandlerErrorStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandHandlerErrorStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }
  
  // optional uint64 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandHandlerErrorStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }
  
  // optional uint64 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandHandlerErrorStatsData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }
    
    // optional uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandHandlerErrorStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandHandlerErrorStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandHandlerErrorStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandHandlerErrorStatsData::MergeFrom(const CommandHandlerErrorStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_opcode(from.opcode());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandHandlerErrorStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandHandlerErrorStatsData::CopyFrom(const CommandHandlerErrorStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHandlerErrorStatsData::IsInitialized() const {
  
  return true;
}

void CommandHandlerErrorStatsData::Swap(CommandHandlerErrorStatsData* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandHandlerErrorStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandHandlerErrorStatsData_descriptor_;
  metadata.reflection = CommandHandlerErrorStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dedupv1dStatsData::kServiceTimeFieldNumber;
#endif  // !_MSC_VER

Dedupv1dStatsData::Dedupv1dStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dedupv1dStatsData::InitAsDefaultInstance() {
}

Dedupv1dStatsData::Dedupv1dStatsData(const Dedupv1dStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dedupv1dStatsData::SharedCtor() {
  _cached_size_ = 0;
  service_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dedupv1dStatsData::~Dedupv1dStatsData() {
  SharedDtor();
}

void Dedupv1dStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dedupv1dStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dedupv1dStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dedupv1dStatsData_descriptor_;
}

const Dedupv1dStatsData& Dedupv1dStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1d_5fstats_2eproto();  return *default_instance_;
}

Dedupv1dStatsData* Dedupv1dStatsData::default_instance_ = NULL;

Dedupv1dStatsData* Dedupv1dStatsData::New() const {
  return new Dedupv1dStatsData;
}

void Dedupv1dStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dedupv1dStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double service_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &service_time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dedupv1dStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double service_time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->service_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dedupv1dStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double service_time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->service_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dedupv1dStatsData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double service_time = 1;
    if (has_service_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dedupv1dStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dedupv1dStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dedupv1dStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dedupv1dStatsData::MergeFrom(const Dedupv1dStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_service_time(from.service_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dedupv1dStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dedupv1dStatsData::CopyFrom(const Dedupv1dStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dedupv1dStatsData::IsInitialized() const {
  
  return true;
}

void Dedupv1dStatsData::Swap(Dedupv1dStatsData* other) {
  if (other != this) {
    std::swap(service_time_, other->service_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dedupv1dStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dedupv1dStatsData_descriptor_;
  metadata.reflection = Dedupv1dStatsData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
