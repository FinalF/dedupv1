from os.path import join, basename
import glob

project = "dedupv1d_test"

Import("env",
  "build_mode",
  "dedupv1_base_lib",
  "dedupv1_base_shared_test_lib",
  "dedupv1_core_lib")

localenv = env.Clone()
Export("localenv")

localenv["CPPFLAGS"].append("-DDEDUPV1D_TEST")
localenv["LIBS"].append("gtest")
localenv["LIBS"].append(dedupv1_base_lib)
localenv["LIBS"].append(dedupv1_base_shared_test_lib)
localenv["LIBS"].append(dedupv1_core_lib)

dedupv1d_test_src = filter(lambda s: not s.path.endswith("dedupv1d_app.cc"), 
  Glob("unit_test/*.cc") + Glob("src/*.cc") + Glob("resources/*.cc"))

prog = localenv.Program(project,
  source =  dedupv1d_test_src,
  CPPPATH = localenv["CPPPATH"] + [
    "#core/include", # normal includes
    "#core/resources", # protobuf inclues
    "#base/include", 
    "#base/resources", 
    "#dedupv1d/include",
    "#dedupv1d/resources"])

localenv.Alias("all", project)
localenv.Alias("test", project)
localenv.Alias(project, prog)
