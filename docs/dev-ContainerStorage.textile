# Container Storage

# Introduction

The container storage is a storage implementation that collects a lot of chunk data in memory and only writes them
to disk if the container data structure is full. This avoids a lot of disk io on the storage backend.

A container consists of a metadata section and a data section. In the metadata section, we store all fingerprints collected in the container and pointers to the area of the container where the data is stored. Additionally we store there container related metadata, e.g. if the chunk data is compressed or not.

Each container has a unique id. This id can be used during reads to lookup the position of the container on disk. Reads accesses to container that are not yet committed to disk are answered from a read cache.

 The clients of the container storage cannot rely on the fact that if a container with id x is committed, every container with id y with y < x - w is also committed. Crashes and thread scheduling issues might prevent this. However, clients can assume that if a system is started and the last committed container had the id x, the system will not commit any new container with id y, y < x:

An important implementation criteria is that a container should never be overwritten as the container data would be lost in cases of crashes. The container storage is not "in-place transactional" and it would be very performance costly to implement it that way. Always choose a Copy-On-Write system.

## Container Storage File Superblock

The container storage file superblock occupies to first 4k of a container storage file. These 4k do not count to the file size and all persistent file offsets do not found the super block. The file offsets start from the beginning of the data area.

The super block contains:

 * A UUID. The uuid is used to check that only the correct container file is configured. When a container file is created, the matching uuid is maintained and stored in the container info data. As the container storage depends on the correct order of the files, the UUID is checked to prevent unintentional misconfigurations

### Backwards Compatibility

Old container storage instances do not have a super block. The system detects this and ignores the super block. The system is than not able to detect a scrabbled ordering of the container files.