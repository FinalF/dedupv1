// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dedupv1.proto

#ifndef PROTOBUF_dedupv1_2eproto__INCLUDED
#define PROTOBUF_dedupv1_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dedupv1_2eproto();
void protobuf_AssignDesc_dedupv1_2eproto();
void protobuf_ShutdownFile_dedupv1_2eproto();

class BlockMappingData;
class BlockMappingPairData;
class BlockMappingPairItemData;
class BlockMappingItemData;
class ChunkMappingData;
class ContainerData;
class ContainerItemData;
class ContainerItemValueData;
class Limit;
class ContainerFileData;
class ContainerSuperblockData;
class ContainerLogfileData;
class SystemStartEventData;
class ReplayStartEventData;
class ReplayStopEventData;
class LogEventData;
class LogEntryData;
class ContainerOpenedEventData;
class ContainerCommittedEventData;
class ContainerMergedEventData;
class ContainerDeletedEventData;
class ContainerMoveEventData;
class ContainerCommitFailedEventData;
class VolumeAttachedEventData;
class VolumeDetachedEventData;
class BlockMappingWrittenEventData;
class BlockMappingWriteFailedEventData;
class BlockMappingDeletedEventData;
class OphranChunksEventData;
class BlockIndexLogfileData;
class ChunkIndexLogfileData;
class BloomFilterLogfileData;
class GarbageCollectionCandidateData;
class GarbageCollectionCandidateItemData;
class GarbageCollectionInfoData;
class ContainerGreedyGCCandidateItemData;
class ContainerGreedyGCCandidateData;
class ContainerStorageAddressData;
class BitmapAllocatorItemData;
class ContainerTrackerData;
class LogReplayIDData;
class LogLogIDData;
class LogStateData;
class MessageData;
class BlockWriteFailedData;

enum GarbageCollectionCandidateItemData_Type {
  GarbageCollectionCandidateItemData_Type_STANDARD = 0,
  GarbageCollectionCandidateItemData_Type_FAILED = 1
};
bool GarbageCollectionCandidateItemData_Type_IsValid(int value);
const GarbageCollectionCandidateItemData_Type GarbageCollectionCandidateItemData_Type_Type_MIN = GarbageCollectionCandidateItemData_Type_STANDARD;
const GarbageCollectionCandidateItemData_Type GarbageCollectionCandidateItemData_Type_Type_MAX = GarbageCollectionCandidateItemData_Type_FAILED;
const int GarbageCollectionCandidateItemData_Type_Type_ARRAYSIZE = GarbageCollectionCandidateItemData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GarbageCollectionCandidateItemData_Type_descriptor();
inline const ::std::string& GarbageCollectionCandidateItemData_Type_Name(GarbageCollectionCandidateItemData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GarbageCollectionCandidateItemData_Type_descriptor(), value);
}
inline bool GarbageCollectionCandidateItemData_Type_Parse(
    const ::std::string& name, GarbageCollectionCandidateItemData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GarbageCollectionCandidateItemData_Type>(
    GarbageCollectionCandidateItemData_Type_descriptor(), name, value);
}
enum CompressionMode {
  COMPRESSION_NO = 0,
  COMPRESSION_DEFLATE = 1,
  COMPRESSION_GZIP = 2,
  COMPRESSION_BZ2 = 3,
  COMPRESSION_SNAPPY = 4,
  COMPRESSION_LZ4 = 5
};
bool CompressionMode_IsValid(int value);
const CompressionMode CompressionMode_MIN = COMPRESSION_NO;
const CompressionMode CompressionMode_MAX = COMPRESSION_LZ4;
const int CompressionMode_ARRAYSIZE = CompressionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressionMode_descriptor();
inline const ::std::string& CompressionMode_Name(CompressionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressionMode_descriptor(), value);
}
inline bool CompressionMode_Parse(
    const ::std::string& name, CompressionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressionMode>(
    CompressionMode_descriptor(), name, value);
}
// ===================================================================

class BlockMappingData : public ::google::protobuf::Message {
 public:
  BlockMappingData();
  virtual ~BlockMappingData();
  
  BlockMappingData(const BlockMappingData& from);
  
  inline BlockMappingData& operator=(const BlockMappingData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMappingData& default_instance();
  
  void Swap(BlockMappingData* other);
  
  // implements Message ----------------------------------------------
  
  BlockMappingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMappingData& from);
  void MergeFrom(const BlockMappingData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 block_id = 1;
  inline bool has_block_id() const;
  inline void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  inline ::google::protobuf::uint64 block_id() const;
  inline void set_block_id(::google::protobuf::uint64 value);
  
  // repeated .BlockMappingItemData items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::BlockMappingItemData& items(int index) const;
  inline ::BlockMappingItemData* mutable_items(int index);
  inline ::BlockMappingItemData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BlockMappingItemData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BlockMappingItemData >*
      mutable_items();
  
  // optional uint32 version_counter = 3;
  inline bool has_version_counter() const;
  inline void clear_version_counter();
  static const int kVersionCounterFieldNumber = 3;
  inline ::google::protobuf::uint32 version_counter() const;
  inline void set_version_counter(::google::protobuf::uint32 value);
  
  // optional uint64 event_log_id = 6;
  inline bool has_event_log_id() const;
  inline void clear_event_log_id();
  static const int kEventLogIdFieldNumber = 6;
  inline ::google::protobuf::uint64 event_log_id() const;
  inline void set_event_log_id(::google::protobuf::uint64 value);
  
  // optional bytes checksum = 7;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 7;
  inline const ::std::string& checksum() const;
  inline void set_checksum(const ::std::string& value);
  inline void set_checksum(const char* value);
  inline void set_checksum(const void* value, size_t size);
  inline ::std::string* mutable_checksum();
  
  // @@protoc_insertion_point(class_scope:BlockMappingData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 block_id_;
  ::google::protobuf::RepeatedPtrField< ::BlockMappingItemData > items_;
  ::google::protobuf::uint32 version_counter_;
  ::google::protobuf::uint64 event_log_id_;
  ::std::string* checksum_;
  static const ::std::string _default_checksum_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockMappingData* default_instance_;
};
// -------------------------------------------------------------------

class BlockMappingPairData : public ::google::protobuf::Message {
 public:
  BlockMappingPairData();
  virtual ~BlockMappingPairData();
  
  BlockMappingPairData(const BlockMappingPairData& from);
  
  inline BlockMappingPairData& operator=(const BlockMappingPairData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMappingPairData& default_instance();
  
  void Swap(BlockMappingPairData* other);
  
  // implements Message ----------------------------------------------
  
  BlockMappingPairData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMappingPairData& from);
  void MergeFrom(const BlockMappingPairData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 block_id = 1;
  inline bool has_block_id() const;
  inline void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  inline ::google::protobuf::uint64 block_id() const;
  inline void set_block_id(::google::protobuf::uint64 value);
  
  // optional uint32 version_counter = 2;
  inline bool has_version_counter() const;
  inline void clear_version_counter();
  static const int kVersionCounterFieldNumber = 2;
  inline ::google::protobuf::uint32 version_counter() const;
  inline void set_version_counter(::google::protobuf::uint32 value);
  
  // repeated .BlockMappingPairItemData items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::BlockMappingPairItemData& items(int index) const;
  inline ::BlockMappingPairItemData* mutable_items(int index);
  inline ::BlockMappingPairItemData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BlockMappingPairItemData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BlockMappingPairItemData >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:BlockMappingPairData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 block_id_;
  ::google::protobuf::uint32 version_counter_;
  ::google::protobuf::RepeatedPtrField< ::BlockMappingPairItemData > items_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockMappingPairData* default_instance_;
};
// -------------------------------------------------------------------

class BlockMappingPairItemData : public ::google::protobuf::Message {
 public:
  BlockMappingPairItemData();
  virtual ~BlockMappingPairItemData();
  
  BlockMappingPairItemData(const BlockMappingPairItemData& from);
  
  inline BlockMappingPairItemData& operator=(const BlockMappingPairItemData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMappingPairItemData& default_instance();
  
  void Swap(BlockMappingPairItemData* other);
  
  // implements Message ----------------------------------------------
  
  BlockMappingPairItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMappingPairItemData& from);
  void MergeFrom(const BlockMappingPairItemData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes fp = 1;
  inline bool has_fp() const;
  inline void clear_fp();
  static const int kFpFieldNumber = 1;
  inline const ::std::string& fp() const;
  inline void set_fp(const ::std::string& value);
  inline void set_fp(const char* value);
  inline void set_fp(const void* value, size_t size);
  inline ::std::string* mutable_fp();
  
  // optional uint64 data_address = 2;
  inline bool has_data_address() const;
  inline void clear_data_address();
  static const int kDataAddressFieldNumber = 2;
  inline ::google::protobuf::uint64 data_address() const;
  inline void set_data_address(::google::protobuf::uint64 value);
  
  // optional uint32 chunk_offset = 3;
  inline bool has_chunk_offset() const;
  inline void clear_chunk_offset();
  static const int kChunkOffsetFieldNumber = 3;
  inline ::google::protobuf::uint32 chunk_offset() const;
  inline void set_chunk_offset(::google::protobuf::uint32 value);
  
  // optional uint32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);
  
  // optional int32 usage_count_modifier = 5;
  inline bool has_usage_count_modifier() const;
  inline void clear_usage_count_modifier();
  static const int kUsageCountModifierFieldNumber = 5;
  inline ::google::protobuf::int32 usage_count_modifier() const;
  inline void set_usage_count_modifier(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:BlockMappingPairItemData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* fp_;
  static const ::std::string _default_fp_;
  ::google::protobuf::uint64 data_address_;
  ::google::protobuf::uint32 chunk_offset_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::int32 usage_count_modifier_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockMappingPairItemData* default_instance_;
};
// -------------------------------------------------------------------

class BlockMappingItemData : public ::google::protobuf::Message {
 public:
  BlockMappingItemData();
  virtual ~BlockMappingItemData();
  
  BlockMappingItemData(const BlockMappingItemData& from);
  
  inline BlockMappingItemData& operator=(const BlockMappingItemData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMappingItemData& default_instance();
  
  void Swap(BlockMappingItemData* other);
  
  // implements Message ----------------------------------------------
  
  BlockMappingItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMappingItemData& from);
  void MergeFrom(const BlockMappingItemData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes fp = 1;
  inline bool has_fp() const;
  inline void clear_fp();
  static const int kFpFieldNumber = 1;
  inline const ::std::string& fp() const;
  inline void set_fp(const ::std::string& value);
  inline void set_fp(const char* value);
  inline void set_fp(const void* value, size_t size);
  inline ::std::string* mutable_fp();
  
  // optional uint64 data_address = 2;
  inline bool has_data_address() const;
  inline void clear_data_address();
  static const int kDataAddressFieldNumber = 2;
  inline ::google::protobuf::uint64 data_address() const;
  inline void set_data_address(::google::protobuf::uint64 value);
  
  // optional uint32 chunk_offset = 3;
  inline bool has_chunk_offset() const;
  inline void clear_chunk_offset();
  static const int kChunkOffsetFieldNumber = 3;
  inline ::google::protobuf::uint32 chunk_offset() const;
  inline void set_chunk_offset(::google::protobuf::uint32 value);
  
  // optional uint32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BlockMappingItemData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* fp_;
  static const ::std::string _default_fp_;
  ::google::protobuf::uint64 data_address_;
  ::google::protobuf::uint32 chunk_offset_;
  ::google::protobuf::uint32 size_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockMappingItemData* default_instance_;
};
// -------------------------------------------------------------------

class ChunkMappingData : public ::google::protobuf::Message {
 public:
  ChunkMappingData();
  virtual ~ChunkMappingData();
  
  ChunkMappingData(const ChunkMappingData& from);
  
  inline ChunkMappingData& operator=(const ChunkMappingData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkMappingData& default_instance();
  
  void Swap(ChunkMappingData* other);
  
  // implements Message ----------------------------------------------
  
  ChunkMappingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChunkMappingData& from);
  void MergeFrom(const ChunkMappingData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 data_address = 1;
  inline bool has_data_address() const;
  inline void clear_data_address();
  static const int kDataAddressFieldNumber = 1;
  inline ::google::protobuf::uint64 data_address() const;
  inline void set_data_address(::google::protobuf::uint64 value);
  
  // optional int64 usage_count = 2;
  inline bool has_usage_count() const;
  inline void clear_usage_count();
  static const int kUsageCountFieldNumber = 2;
  inline ::google::protobuf::int64 usage_count() const;
  inline void set_usage_count(::google::protobuf::int64 value);
  
  // optional uint64 usage_count_change_log_id = 3;
  inline bool has_usage_count_change_log_id() const;
  inline void clear_usage_count_change_log_id();
  static const int kUsageCountChangeLogIdFieldNumber = 3;
  inline ::google::protobuf::uint64 usage_count_change_log_id() const;
  inline void set_usage_count_change_log_id(::google::protobuf::uint64 value);
  
  // optional uint64 usage_count_failed_write_change_log_id = 4;
  inline bool has_usage_count_failed_write_change_log_id() const;
  inline void clear_usage_count_failed_write_change_log_id();
  static const int kUsageCountFailedWriteChangeLogIdFieldNumber = 4;
  inline ::google::protobuf::uint64 usage_count_failed_write_change_log_id() const;
  inline void set_usage_count_failed_write_change_log_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ChunkMappingData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 data_address_;
  ::google::protobuf::int64 usage_count_;
  ::google::protobuf::uint64 usage_count_change_log_id_;
  ::google::protobuf::uint64 usage_count_failed_write_change_log_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChunkMappingData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerData : public ::google::protobuf::Message {
 public:
  ContainerData();
  virtual ~ContainerData();
  
  ContainerData(const ContainerData& from);
  
  inline ContainerData& operator=(const ContainerData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerData& default_instance();
  
  void Swap(ContainerData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerData& from);
  void MergeFrom(const ContainerData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 primary_id = 1;
  inline bool has_primary_id() const;
  inline void clear_primary_id();
  static const int kPrimaryIdFieldNumber = 1;
  inline ::google::protobuf::uint64 primary_id() const;
  inline void set_primary_id(::google::protobuf::uint64 value);
  
  // optional uint32 container_size = 2;
  inline bool has_container_size() const;
  inline void clear_container_size();
  static const int kContainerSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 container_size() const;
  inline void set_container_size(::google::protobuf::uint32 value);
  
  // repeated .ContainerItemData items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::ContainerItemData& items(int index) const;
  inline ::ContainerItemData* mutable_items(int index);
  inline ::ContainerItemData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ContainerItemData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContainerItemData >*
      mutable_items();
  
  // optional uint32 commit_time = 5;
  inline bool has_commit_time() const;
  inline void clear_commit_time();
  static const int kCommitTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 commit_time() const;
  inline void set_commit_time(::google::protobuf::uint32 value);
  
  // optional uint32 checksum = 7;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 7;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ContainerData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 primary_id_;
  ::google::protobuf::uint32 container_size_;
  ::google::protobuf::RepeatedPtrField< ::ContainerItemData > items_;
  ::google::protobuf::uint32 commit_time_;
  ::google::protobuf::uint32 checksum_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerItemData : public ::google::protobuf::Message {
 public:
  ContainerItemData();
  virtual ~ContainerItemData();
  
  ContainerItemData(const ContainerItemData& from);
  
  inline ContainerItemData& operator=(const ContainerItemData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerItemData& default_instance();
  
  void Swap(ContainerItemData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerItemData& from);
  void MergeFrom(const ContainerItemData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes fp = 1;
  inline bool has_fp() const;
  inline void clear_fp();
  static const int kFpFieldNumber = 1;
  inline const ::std::string& fp() const;
  inline void set_fp(const ::std::string& value);
  inline void set_fp(const char* value);
  inline void set_fp(const void* value, size_t size);
  inline ::std::string* mutable_fp();
  
  // optional uint32 position_offset = 2;
  inline bool has_position_offset() const;
  inline void clear_position_offset();
  static const int kPositionOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 position_offset() const;
  inline void set_position_offset(::google::protobuf::uint32 value);
  
  // optional uint32 item_size = 3;
  inline bool has_item_size() const;
  inline void clear_item_size();
  static const int kItemSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 item_size() const;
  inline void set_item_size(::google::protobuf::uint32 value);
  
  // optional uint32 raw_size = 4;
  inline bool has_raw_size() const;
  inline void clear_raw_size();
  static const int kRawSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 raw_size() const;
  inline void set_raw_size(::google::protobuf::uint32 value);
  
  // optional bool deleted = 5;
  inline bool has_deleted() const;
  inline void clear_deleted();
  static const int kDeletedFieldNumber = 5;
  inline bool deleted() const;
  inline void set_deleted(bool value);
  
  // optional uint64 original_id = 6;
  inline bool has_original_id() const;
  inline void clear_original_id();
  static const int kOriginalIdFieldNumber = 6;
  inline ::google::protobuf::uint64 original_id() const;
  inline void set_original_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ContainerItemData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* fp_;
  static const ::std::string _default_fp_;
  ::google::protobuf::uint32 position_offset_;
  ::google::protobuf::uint32 item_size_;
  ::google::protobuf::uint32 raw_size_;
  bool deleted_;
  ::google::protobuf::uint64 original_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerItemData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerItemValueData : public ::google::protobuf::Message {
 public:
  ContainerItemValueData();
  virtual ~ContainerItemValueData();
  
  ContainerItemValueData(const ContainerItemValueData& from);
  
  inline ContainerItemValueData& operator=(const ContainerItemValueData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerItemValueData& default_instance();
  
  void Swap(ContainerItemValueData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerItemValueData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerItemValueData& from);
  void MergeFrom(const ContainerItemValueData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 on_disk_size = 3;
  inline bool has_on_disk_size() const;
  inline void clear_on_disk_size();
  static const int kOnDiskSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 on_disk_size() const;
  inline void set_on_disk_size(::google::protobuf::uint32 value);
  
  // optional .CompressionMode compression = 4 [default = COMPRESSION_NO];
  inline bool has_compression() const;
  inline void clear_compression();
  static const int kCompressionFieldNumber = 4;
  inline CompressionMode compression() const;
  inline void set_compression(CompressionMode value);
  
  // @@protoc_insertion_point(class_scope:ContainerItemValueData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 on_disk_size_;
  int compression_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerItemValueData* default_instance_;
};
// -------------------------------------------------------------------

class Limit : public ::google::protobuf::Message {
 public:
  Limit();
  virtual ~Limit();
  
  Limit(const Limit& from);
  
  inline Limit& operator=(const Limit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Limit& default_instance();
  
  void Swap(Limit* other);
  
  // implements Message ----------------------------------------------
  
  Limit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Limit& from);
  void MergeFrom(const Limit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Limit)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 size_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Limit* default_instance_;
};
// -------------------------------------------------------------------

class ContainerFileData : public ::google::protobuf::Message {
 public:
  ContainerFileData();
  virtual ~ContainerFileData();
  
  ContainerFileData(const ContainerFileData& from);
  
  inline ContainerFileData& operator=(const ContainerFileData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerFileData& default_instance();
  
  void Swap(ContainerFileData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerFileData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerFileData& from);
  void MergeFrom(const ContainerFileData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  
  // optional uint64 file_size = 2;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);
  
  // optional string uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  
  // @@protoc_insertion_point(class_scope:ContainerFileData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* filename_;
  static const ::std::string _default_filename_;
  ::google::protobuf::uint64 file_size_;
  ::std::string* uuid_;
  static const ::std::string _default_uuid_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerFileData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerSuperblockData : public ::google::protobuf::Message {
 public:
  ContainerSuperblockData();
  virtual ~ContainerSuperblockData();
  
  ContainerSuperblockData(const ContainerSuperblockData& from);
  
  inline ContainerSuperblockData& operator=(const ContainerSuperblockData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerSuperblockData& default_instance();
  
  void Swap(ContainerSuperblockData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerSuperblockData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerSuperblockData& from);
  void MergeFrom(const ContainerSuperblockData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  
  // @@protoc_insertion_point(class_scope:ContainerSuperblockData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* uuid_;
  static const ::std::string _default_uuid_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerSuperblockData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerLogfileData : public ::google::protobuf::Message {
 public:
  ContainerLogfileData();
  virtual ~ContainerLogfileData();
  
  ContainerLogfileData(const ContainerLogfileData& from);
  
  inline ContainerLogfileData& operator=(const ContainerLogfileData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerLogfileData& default_instance();
  
  void Swap(ContainerLogfileData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerLogfileData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerLogfileData& from);
  void MergeFrom(const ContainerLogfileData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 last_given_container_id = 1;
  inline bool has_last_given_container_id() const;
  inline void clear_last_given_container_id();
  static const int kLastGivenContainerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 last_given_container_id() const;
  inline void set_last_given_container_id(::google::protobuf::uint64 value);
  
  // optional uint32 container_size = 2;
  inline bool has_container_size() const;
  inline void clear_container_size();
  static const int kContainerSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 container_size() const;
  inline void set_container_size(::google::protobuf::uint32 value);
  
  // optional uint32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);
  
  // repeated .ContainerFileData file = 4;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 4;
  inline const ::ContainerFileData& file(int index) const;
  inline ::ContainerFileData* mutable_file(int index);
  inline ::ContainerFileData* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::ContainerFileData >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContainerFileData >*
      mutable_file();
  
  // optional bool contains_superblock = 5;
  inline bool has_contains_superblock() const;
  inline void clear_contains_superblock();
  static const int kContainsSuperblockFieldNumber = 5;
  inline bool contains_superblock() const;
  inline void set_contains_superblock(bool value);
  
  // @@protoc_insertion_point(class_scope:ContainerLogfileData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 last_given_container_id_;
  ::google::protobuf::uint32 container_size_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::RepeatedPtrField< ::ContainerFileData > file_;
  bool contains_superblock_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerLogfileData* default_instance_;
};
// -------------------------------------------------------------------

class SystemStartEventData : public ::google::protobuf::Message {
 public:
  SystemStartEventData();
  virtual ~SystemStartEventData();
  
  SystemStartEventData(const SystemStartEventData& from);
  
  inline SystemStartEventData& operator=(const SystemStartEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemStartEventData& default_instance();
  
  void Swap(SystemStartEventData* other);
  
  // implements Message ----------------------------------------------
  
  SystemStartEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemStartEventData& from);
  void MergeFrom(const SystemStartEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool create = 1;
  inline bool has_create() const;
  inline void clear_create();
  static const int kCreateFieldNumber = 1;
  inline bool create() const;
  inline void set_create(bool value);
  
  // optional bool dirty = 2;
  inline bool has_dirty() const;
  inline void clear_dirty();
  static const int kDirtyFieldNumber = 2;
  inline bool dirty() const;
  inline void set_dirty(bool value);
  
  // optional bool forced = 3;
  inline bool has_forced() const;
  inline void clear_forced();
  static const int kForcedFieldNumber = 3;
  inline bool forced() const;
  inline void set_forced(bool value);
  
  // optional bool crashed = 4;
  inline bool has_crashed() const;
  inline void clear_crashed();
  static const int kCrashedFieldNumber = 4;
  inline bool crashed() const;
  inline void set_crashed(bool value);
  
  // @@protoc_insertion_point(class_scope:SystemStartEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool create_;
  bool dirty_;
  bool forced_;
  bool crashed_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SystemStartEventData* default_instance_;
};
// -------------------------------------------------------------------

class ReplayStartEventData : public ::google::protobuf::Message {
 public:
  ReplayStartEventData();
  virtual ~ReplayStartEventData();
  
  ReplayStartEventData(const ReplayStartEventData& from);
  
  inline ReplayStartEventData& operator=(const ReplayStartEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplayStartEventData& default_instance();
  
  void Swap(ReplayStartEventData* other);
  
  // implements Message ----------------------------------------------
  
  ReplayStartEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplayStartEventData& from);
  void MergeFrom(const ReplayStartEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 replay_type = 1;
  inline bool has_replay_type() const;
  inline void clear_replay_type();
  static const int kReplayTypeFieldNumber = 1;
  inline ::google::protobuf::int32 replay_type() const;
  inline void set_replay_type(::google::protobuf::int32 value);
  
  // optional uint64 replay_id = 3;
  inline bool has_replay_id() const;
  inline void clear_replay_id();
  static const int kReplayIdFieldNumber = 3;
  inline ::google::protobuf::uint64 replay_id() const;
  inline void set_replay_id(::google::protobuf::uint64 value);
  
  // optional uint64 log_id = 4;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 4;
  inline ::google::protobuf::uint64 log_id() const;
  inline void set_log_id(::google::protobuf::uint64 value);
  
  // optional bool full_log_replay = 5;
  inline bool has_full_log_replay() const;
  inline void clear_full_log_replay();
  static const int kFullLogReplayFieldNumber = 5;
  inline bool full_log_replay() const;
  inline void set_full_log_replay(bool value);
  
  // @@protoc_insertion_point(class_scope:ReplayStartEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 replay_type_;
  ::google::protobuf::uint64 replay_id_;
  ::google::protobuf::uint64 log_id_;
  bool full_log_replay_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ReplayStartEventData* default_instance_;
};
// -------------------------------------------------------------------

class ReplayStopEventData : public ::google::protobuf::Message {
 public:
  ReplayStopEventData();
  virtual ~ReplayStopEventData();
  
  ReplayStopEventData(const ReplayStopEventData& from);
  
  inline ReplayStopEventData& operator=(const ReplayStopEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplayStopEventData& default_instance();
  
  void Swap(ReplayStopEventData* other);
  
  // implements Message ----------------------------------------------
  
  ReplayStopEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplayStopEventData& from);
  void MergeFrom(const ReplayStopEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 replay_type = 1;
  inline bool has_replay_type() const;
  inline void clear_replay_type();
  static const int kReplayTypeFieldNumber = 1;
  inline ::google::protobuf::int32 replay_type() const;
  inline void set_replay_type(::google::protobuf::int32 value);
  
  // optional bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);
  
  // optional uint64 replay_id = 3;
  inline bool has_replay_id() const;
  inline void clear_replay_id();
  static const int kReplayIdFieldNumber = 3;
  inline ::google::protobuf::uint64 replay_id() const;
  inline void set_replay_id(::google::protobuf::uint64 value);
  
  // optional uint64 log_id = 4;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 4;
  inline ::google::protobuf::uint64 log_id() const;
  inline void set_log_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ReplayStopEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 replay_type_;
  bool success_;
  ::google::protobuf::uint64 replay_id_;
  ::google::protobuf::uint64 log_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ReplayStopEventData* default_instance_;
};
// -------------------------------------------------------------------

class LogEventData : public ::google::protobuf::Message {
 public:
  LogEventData();
  virtual ~LogEventData();
  
  LogEventData(const LogEventData& from);
  
  inline LogEventData& operator=(const LogEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEventData& default_instance();
  
  void Swap(LogEventData* other);
  
  // implements Message ----------------------------------------------
  
  LogEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEventData& from);
  void MergeFrom(const LogEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 event_type = 97;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 97;
  inline ::google::protobuf::int32 event_type() const;
  inline void set_event_type(::google::protobuf::int32 value);
  
  // optional .ContainerOpenedEventData container_opened_event = 1;
  inline bool has_container_opened_event() const;
  inline void clear_container_opened_event();
  static const int kContainerOpenedEventFieldNumber = 1;
  inline const ::ContainerOpenedEventData& container_opened_event() const;
  inline ::ContainerOpenedEventData* mutable_container_opened_event();
  
  // optional .ContainerCommittedEventData container_committed_event = 2;
  inline bool has_container_committed_event() const;
  inline void clear_container_committed_event();
  static const int kContainerCommittedEventFieldNumber = 2;
  inline const ::ContainerCommittedEventData& container_committed_event() const;
  inline ::ContainerCommittedEventData* mutable_container_committed_event();
  
  // optional .ContainerMergedEventData container_merged_event = 3;
  inline bool has_container_merged_event() const;
  inline void clear_container_merged_event();
  static const int kContainerMergedEventFieldNumber = 3;
  inline const ::ContainerMergedEventData& container_merged_event() const;
  inline ::ContainerMergedEventData* mutable_container_merged_event();
  
  // optional .ContainerDeletedEventData container_deleted_event = 4;
  inline bool has_container_deleted_event() const;
  inline void clear_container_deleted_event();
  static const int kContainerDeletedEventFieldNumber = 4;
  inline const ::ContainerDeletedEventData& container_deleted_event() const;
  inline ::ContainerDeletedEventData* mutable_container_deleted_event();
  
  // optional .ContainerMoveEventData container_moved_event = 5;
  inline bool has_container_moved_event() const;
  inline void clear_container_moved_event();
  static const int kContainerMovedEventFieldNumber = 5;
  inline const ::ContainerMoveEventData& container_moved_event() const;
  inline ::ContainerMoveEventData* mutable_container_moved_event();
  
  // optional .ContainerCommitFailedEventData container_commit_failed_event = 6;
  inline bool has_container_commit_failed_event() const;
  inline void clear_container_commit_failed_event();
  static const int kContainerCommitFailedEventFieldNumber = 6;
  inline const ::ContainerCommitFailedEventData& container_commit_failed_event() const;
  inline ::ContainerCommitFailedEventData* mutable_container_commit_failed_event();
  
  // optional .VolumeAttachedEventData volume_attached_event = 7;
  inline bool has_volume_attached_event() const;
  inline void clear_volume_attached_event();
  static const int kVolumeAttachedEventFieldNumber = 7;
  inline const ::VolumeAttachedEventData& volume_attached_event() const;
  inline ::VolumeAttachedEventData* mutable_volume_attached_event();
  
  // optional .VolumeDetachedEventData volume_detached_event = 8;
  inline bool has_volume_detached_event() const;
  inline void clear_volume_detached_event();
  static const int kVolumeDetachedEventFieldNumber = 8;
  inline const ::VolumeDetachedEventData& volume_detached_event() const;
  inline ::VolumeDetachedEventData* mutable_volume_detached_event();
  
  // optional .BlockMappingWrittenEventData block_mapping_written_event = 9;
  inline bool has_block_mapping_written_event() const;
  inline void clear_block_mapping_written_event();
  static const int kBlockMappingWrittenEventFieldNumber = 9;
  inline const ::BlockMappingWrittenEventData& block_mapping_written_event() const;
  inline ::BlockMappingWrittenEventData* mutable_block_mapping_written_event();
  
  // optional .BlockMappingWriteFailedEventData block_mapping_write_failed_event = 10;
  inline bool has_block_mapping_write_failed_event() const;
  inline void clear_block_mapping_write_failed_event();
  static const int kBlockMappingWriteFailedEventFieldNumber = 10;
  inline const ::BlockMappingWriteFailedEventData& block_mapping_write_failed_event() const;
  inline ::BlockMappingWriteFailedEventData* mutable_block_mapping_write_failed_event();
  
  // optional .BlockMappingDeletedEventData block_mapping_deleted_event = 11;
  inline bool has_block_mapping_deleted_event() const;
  inline void clear_block_mapping_deleted_event();
  static const int kBlockMappingDeletedEventFieldNumber = 11;
  inline const ::BlockMappingDeletedEventData& block_mapping_deleted_event() const;
  inline ::BlockMappingDeletedEventData* mutable_block_mapping_deleted_event();
  
  // optional .OphranChunksEventData ophran_chunks_event = 12;
  inline bool has_ophran_chunks_event() const;
  inline void clear_ophran_chunks_event();
  static const int kOphranChunksEventFieldNumber = 12;
  inline const ::OphranChunksEventData& ophran_chunks_event() const;
  inline ::OphranChunksEventData* mutable_ophran_chunks_event();
  
  // optional .ReplayStartEventData replay_start_event = 13;
  inline bool has_replay_start_event() const;
  inline void clear_replay_start_event();
  static const int kReplayStartEventFieldNumber = 13;
  inline const ::ReplayStartEventData& replay_start_event() const;
  inline ::ReplayStartEventData* mutable_replay_start_event();
  
  // optional .ReplayStopEventData replay_stop_event = 14;
  inline bool has_replay_stop_event() const;
  inline void clear_replay_stop_event();
  static const int kReplayStopEventFieldNumber = 14;
  inline const ::ReplayStopEventData& replay_stop_event() const;
  inline ::ReplayStopEventData* mutable_replay_stop_event();
  
  // optional .SystemStartEventData system_start_event = 15;
  inline bool has_system_start_event() const;
  inline void clear_system_start_event();
  static const int kSystemStartEventFieldNumber = 15;
  inline const ::SystemStartEventData& system_start_event() const;
  inline ::SystemStartEventData* mutable_system_start_event();
  
  // optional .MessageData message_data = 98;
  inline bool has_message_data() const;
  inline void clear_message_data();
  static const int kMessageDataFieldNumber = 98;
  inline const ::MessageData& message_data() const;
  inline ::MessageData* mutable_message_data();
  
  // @@protoc_insertion_point(class_scope:LogEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 event_type_;
  ::ContainerOpenedEventData* container_opened_event_;
  ::ContainerCommittedEventData* container_committed_event_;
  ::ContainerMergedEventData* container_merged_event_;
  ::ContainerDeletedEventData* container_deleted_event_;
  ::ContainerMoveEventData* container_moved_event_;
  ::ContainerCommitFailedEventData* container_commit_failed_event_;
  ::VolumeAttachedEventData* volume_attached_event_;
  ::VolumeDetachedEventData* volume_detached_event_;
  ::BlockMappingWrittenEventData* block_mapping_written_event_;
  ::BlockMappingWriteFailedEventData* block_mapping_write_failed_event_;
  ::BlockMappingDeletedEventData* block_mapping_deleted_event_;
  ::OphranChunksEventData* ophran_chunks_event_;
  ::ReplayStartEventData* replay_start_event_;
  ::ReplayStopEventData* replay_stop_event_;
  ::SystemStartEventData* system_start_event_;
  ::MessageData* message_data_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogEventData* default_instance_;
};
// -------------------------------------------------------------------

class LogEntryData : public ::google::protobuf::Message {
 public:
  LogEntryData();
  virtual ~LogEntryData();
  
  LogEntryData(const LogEntryData& from);
  
  inline LogEntryData& operator=(const LogEntryData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntryData& default_instance();
  
  void Swap(LogEntryData* other);
  
  // implements Message ----------------------------------------------
  
  LogEntryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntryData& from);
  void MergeFrom(const LogEntryData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 log_id = 7;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 7;
  inline ::google::protobuf::int64 log_id() const;
  inline void set_log_id(::google::protobuf::int64 value);
  
  // optional bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // optional uint32 partial_index = 5;
  inline bool has_partial_index() const;
  inline void clear_partial_index();
  static const int kPartialIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 partial_index() const;
  inline void set_partial_index(::google::protobuf::uint32 value);
  
  // optional uint32 partial_count = 6;
  inline bool has_partial_count() const;
  inline void clear_partial_count();
  static const int kPartialCountFieldNumber = 6;
  inline ::google::protobuf::uint32 partial_count() const;
  inline void set_partial_count(::google::protobuf::uint32 value);
  
  // optional int64 last_fully_written_log_id = 8;
  inline bool has_last_fully_written_log_id() const;
  inline void clear_last_fully_written_log_id();
  static const int kLastFullyWrittenLogIdFieldNumber = 8;
  inline ::google::protobuf::int64 last_fully_written_log_id() const;
  inline void set_last_fully_written_log_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:LogEntryData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 log_id_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  ::google::protobuf::uint32 partial_index_;
  ::google::protobuf::uint32 partial_count_;
  ::google::protobuf::int64 last_fully_written_log_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogEntryData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerOpenedEventData : public ::google::protobuf::Message {
 public:
  ContainerOpenedEventData();
  virtual ~ContainerOpenedEventData();
  
  ContainerOpenedEventData(const ContainerOpenedEventData& from);
  
  inline ContainerOpenedEventData& operator=(const ContainerOpenedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerOpenedEventData& default_instance();
  
  void Swap(ContainerOpenedEventData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerOpenedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerOpenedEventData& from);
  void MergeFrom(const ContainerOpenedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 container_id() const;
  inline void set_container_id(::google::protobuf::uint64 value);
  
  // optional .ContainerStorageAddressData address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::ContainerStorageAddressData& address() const;
  inline ::ContainerStorageAddressData* mutable_address();
  
  // @@protoc_insertion_point(class_scope:ContainerOpenedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 container_id_;
  ::ContainerStorageAddressData* address_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerOpenedEventData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerCommittedEventData : public ::google::protobuf::Message {
 public:
  ContainerCommittedEventData();
  virtual ~ContainerCommittedEventData();
  
  ContainerCommittedEventData(const ContainerCommittedEventData& from);
  
  inline ContainerCommittedEventData& operator=(const ContainerCommittedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerCommittedEventData& default_instance();
  
  void Swap(ContainerCommittedEventData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerCommittedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerCommittedEventData& from);
  void MergeFrom(const ContainerCommittedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 container_id() const;
  inline void set_container_id(::google::protobuf::uint64 value);
  
  // optional .ContainerStorageAddressData address = 4;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 4;
  inline const ::ContainerStorageAddressData& address() const;
  inline ::ContainerStorageAddressData* mutable_address();
  
  // optional uint32 item_count = 5;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);
  
  // optional uint32 active_data_size = 6;
  inline bool has_active_data_size() const;
  inline void clear_active_data_size();
  static const int kActiveDataSizeFieldNumber = 6;
  inline ::google::protobuf::uint32 active_data_size() const;
  inline void set_active_data_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ContainerCommittedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 container_id_;
  ::ContainerStorageAddressData* address_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 active_data_size_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerCommittedEventData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerMergedEventData : public ::google::protobuf::Message {
 public:
  ContainerMergedEventData();
  virtual ~ContainerMergedEventData();
  
  ContainerMergedEventData(const ContainerMergedEventData& from);
  
  inline ContainerMergedEventData& operator=(const ContainerMergedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerMergedEventData& default_instance();
  
  void Swap(ContainerMergedEventData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerMergedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerMergedEventData& from);
  void MergeFrom(const ContainerMergedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 first_id = 1;
  inline bool has_first_id() const;
  inline void clear_first_id();
  static const int kFirstIdFieldNumber = 1;
  inline ::google::protobuf::uint64 first_id() const;
  inline void set_first_id(::google::protobuf::uint64 value);
  
  // required uint64 second_id = 2;
  inline bool has_second_id() const;
  inline void clear_second_id();
  static const int kSecondIdFieldNumber = 2;
  inline ::google::protobuf::uint64 second_id() const;
  inline void set_second_id(::google::protobuf::uint64 value);
  
  // repeated uint64 first_secondary_id = 3 [packed = true];
  inline int first_secondary_id_size() const;
  inline void clear_first_secondary_id();
  static const int kFirstSecondaryIdFieldNumber = 3;
  inline ::google::protobuf::uint64 first_secondary_id(int index) const;
  inline void set_first_secondary_id(int index, ::google::protobuf::uint64 value);
  inline void add_first_secondary_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      first_secondary_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_first_secondary_id();
  
  // repeated uint64 second_secondary_id = 4 [packed = true];
  inline int second_secondary_id_size() const;
  inline void clear_second_secondary_id();
  static const int kSecondSecondaryIdFieldNumber = 4;
  inline ::google::protobuf::uint64 second_secondary_id(int index) const;
  inline void set_second_secondary_id(int index, ::google::protobuf::uint64 value);
  inline void add_second_secondary_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      second_secondary_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_second_secondary_id();
  
  // optional .ContainerStorageAddressData first_address = 13;
  inline bool has_first_address() const;
  inline void clear_first_address();
  static const int kFirstAddressFieldNumber = 13;
  inline const ::ContainerStorageAddressData& first_address() const;
  inline ::ContainerStorageAddressData* mutable_first_address();
  
  // optional .ContainerStorageAddressData second_address = 14;
  inline bool has_second_address() const;
  inline void clear_second_address();
  static const int kSecondAddressFieldNumber = 14;
  inline const ::ContainerStorageAddressData& second_address() const;
  inline ::ContainerStorageAddressData* mutable_second_address();
  
  // optional .ContainerStorageAddressData new_address = 15;
  inline bool has_new_address() const;
  inline void clear_new_address();
  static const int kNewAddressFieldNumber = 15;
  inline const ::ContainerStorageAddressData& new_address() const;
  inline ::ContainerStorageAddressData* mutable_new_address();
  
  // optional uint64 new_primary_id = 18;
  inline bool has_new_primary_id() const;
  inline void clear_new_primary_id();
  static const int kNewPrimaryIdFieldNumber = 18;
  inline ::google::protobuf::uint64 new_primary_id() const;
  inline void set_new_primary_id(::google::protobuf::uint64 value);
  
  // repeated uint64 new_secondary_id = 11 [packed = true];
  inline int new_secondary_id_size() const;
  inline void clear_new_secondary_id();
  static const int kNewSecondaryIdFieldNumber = 11;
  inline ::google::protobuf::uint64 new_secondary_id(int index) const;
  inline void set_new_secondary_id(int index, ::google::protobuf::uint64 value);
  inline void add_new_secondary_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      new_secondary_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_new_secondary_id();
  
  // repeated uint64 unused_ids = 12 [packed = true];
  inline int unused_ids_size() const;
  inline void clear_unused_ids();
  static const int kUnusedIdsFieldNumber = 12;
  inline ::google::protobuf::uint64 unused_ids(int index) const;
  inline void set_unused_ids(int index, ::google::protobuf::uint64 value);
  inline void add_unused_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      unused_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_unused_ids();
  
  // optional uint32 new_item_count = 16;
  inline bool has_new_item_count() const;
  inline void clear_new_item_count();
  static const int kNewItemCountFieldNumber = 16;
  inline ::google::protobuf::uint32 new_item_count() const;
  inline void set_new_item_count(::google::protobuf::uint32 value);
  
  // optional uint32 new_active_data_size = 17;
  inline bool has_new_active_data_size() const;
  inline void clear_new_active_data_size();
  static const int kNewActiveDataSizeFieldNumber = 17;
  inline ::google::protobuf::uint32 new_active_data_size() const;
  inline void set_new_active_data_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ContainerMergedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 first_id_;
  ::google::protobuf::uint64 second_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > first_secondary_id_;
  mutable int _first_secondary_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > second_secondary_id_;
  mutable int _second_secondary_id_cached_byte_size_;
  ::ContainerStorageAddressData* first_address_;
  ::ContainerStorageAddressData* second_address_;
  ::ContainerStorageAddressData* new_address_;
  ::google::protobuf::uint64 new_primary_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > new_secondary_id_;
  mutable int _new_secondary_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > unused_ids_;
  mutable int _unused_ids_cached_byte_size_;
  ::google::protobuf::uint32 new_item_count_;
  ::google::protobuf::uint32 new_active_data_size_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerMergedEventData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerDeletedEventData : public ::google::protobuf::Message {
 public:
  ContainerDeletedEventData();
  virtual ~ContainerDeletedEventData();
  
  ContainerDeletedEventData(const ContainerDeletedEventData& from);
  
  inline ContainerDeletedEventData& operator=(const ContainerDeletedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerDeletedEventData& default_instance();
  
  void Swap(ContainerDeletedEventData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerDeletedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerDeletedEventData& from);
  void MergeFrom(const ContainerDeletedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 container_id() const;
  inline void set_container_id(::google::protobuf::uint64 value);
  
  // repeated uint64 secondary_container_id = 2 [packed = true];
  inline int secondary_container_id_size() const;
  inline void clear_secondary_container_id();
  static const int kSecondaryContainerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 secondary_container_id(int index) const;
  inline void set_secondary_container_id(int index, ::google::protobuf::uint64 value);
  inline void add_secondary_container_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      secondary_container_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_secondary_container_id();
  
  // optional .ContainerStorageAddressData address = 5;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 5;
  inline const ::ContainerStorageAddressData& address() const;
  inline ::ContainerStorageAddressData* mutable_address();
  
  // optional uint64 file_offset = 4;
  inline bool has_file_offset() const;
  inline void clear_file_offset();
  static const int kFileOffsetFieldNumber = 4;
  inline ::google::protobuf::uint64 file_offset() const;
  inline void set_file_offset(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ContainerDeletedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 container_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > secondary_container_id_;
  mutable int _secondary_container_id_cached_byte_size_;
  ::ContainerStorageAddressData* address_;
  ::google::protobuf::uint64 file_offset_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerDeletedEventData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerMoveEventData : public ::google::protobuf::Message {
 public:
  ContainerMoveEventData();
  virtual ~ContainerMoveEventData();
  
  ContainerMoveEventData(const ContainerMoveEventData& from);
  
  inline ContainerMoveEventData& operator=(const ContainerMoveEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerMoveEventData& default_instance();
  
  void Swap(ContainerMoveEventData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerMoveEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerMoveEventData& from);
  void MergeFrom(const ContainerMoveEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 container_id() const;
  inline void set_container_id(::google::protobuf::uint64 value);
  
  // optional .ContainerStorageAddressData old_address = 6;
  inline bool has_old_address() const;
  inline void clear_old_address();
  static const int kOldAddressFieldNumber = 6;
  inline const ::ContainerStorageAddressData& old_address() const;
  inline ::ContainerStorageAddressData* mutable_old_address();
  
  // optional .ContainerStorageAddressData new_address = 7;
  inline bool has_new_address() const;
  inline void clear_new_address();
  static const int kNewAddressFieldNumber = 7;
  inline const ::ContainerStorageAddressData& new_address() const;
  inline ::ContainerStorageAddressData* mutable_new_address();
  
  // optional uint64 active_data_size = 8;
  inline bool has_active_data_size() const;
  inline void clear_active_data_size();
  static const int kActiveDataSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 active_data_size() const;
  inline void set_active_data_size(::google::protobuf::uint64 value);
  
  // optional uint64 old_active_data_size = 9;
  inline bool has_old_active_data_size() const;
  inline void clear_old_active_data_size();
  static const int kOldActiveDataSizeFieldNumber = 9;
  inline ::google::protobuf::uint64 old_active_data_size() const;
  inline void set_old_active_data_size(::google::protobuf::uint64 value);
  
  // optional uint32 item_count = 10;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 10;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);
  
  // optional uint32 old_item_count = 11;
  inline bool has_old_item_count() const;
  inline void clear_old_item_count();
  static const int kOldItemCountFieldNumber = 11;
  inline ::google::protobuf::uint32 old_item_count() const;
  inline void set_old_item_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ContainerMoveEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 container_id_;
  ::ContainerStorageAddressData* old_address_;
  ::ContainerStorageAddressData* new_address_;
  ::google::protobuf::uint64 active_data_size_;
  ::google::protobuf::uint64 old_active_data_size_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 old_item_count_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerMoveEventData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerCommitFailedEventData : public ::google::protobuf::Message {
 public:
  ContainerCommitFailedEventData();
  virtual ~ContainerCommitFailedEventData();
  
  ContainerCommitFailedEventData(const ContainerCommitFailedEventData& from);
  
  inline ContainerCommitFailedEventData& operator=(const ContainerCommitFailedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerCommitFailedEventData& default_instance();
  
  void Swap(ContainerCommitFailedEventData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerCommitFailedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerCommitFailedEventData& from);
  void MergeFrom(const ContainerCommitFailedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 container_id = 1;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 container_id() const;
  inline void set_container_id(::google::protobuf::uint64 value);
  
  // repeated bytes item_key = 2;
  inline int item_key_size() const;
  inline void clear_item_key();
  static const int kItemKeyFieldNumber = 2;
  inline const ::std::string& item_key(int index) const;
  inline ::std::string* mutable_item_key(int index);
  inline void set_item_key(int index, const ::std::string& value);
  inline void set_item_key(int index, const char* value);
  inline void set_item_key(int index, const void* value, size_t size);
  inline ::std::string* add_item_key();
  inline void add_item_key(const ::std::string& value);
  inline void add_item_key(const char* value);
  inline void add_item_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& item_key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_key();
  
  // @@protoc_insertion_point(class_scope:ContainerCommitFailedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 container_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_key_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerCommitFailedEventData* default_instance_;
};
// -------------------------------------------------------------------

class VolumeAttachedEventData : public ::google::protobuf::Message {
 public:
  VolumeAttachedEventData();
  virtual ~VolumeAttachedEventData();
  
  VolumeAttachedEventData(const VolumeAttachedEventData& from);
  
  inline VolumeAttachedEventData& operator=(const VolumeAttachedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VolumeAttachedEventData& default_instance();
  
  void Swap(VolumeAttachedEventData* other);
  
  // implements Message ----------------------------------------------
  
  VolumeAttachedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VolumeAttachedEventData& from);
  void MergeFrom(const VolumeAttachedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 volume_id = 1;
  inline bool has_volume_id() const;
  inline void clear_volume_id();
  static const int kVolumeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 volume_id() const;
  inline void set_volume_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:VolumeAttachedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 volume_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VolumeAttachedEventData* default_instance_;
};
// -------------------------------------------------------------------

class VolumeDetachedEventData : public ::google::protobuf::Message {
 public:
  VolumeDetachedEventData();
  virtual ~VolumeDetachedEventData();
  
  VolumeDetachedEventData(const VolumeDetachedEventData& from);
  
  inline VolumeDetachedEventData& operator=(const VolumeDetachedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VolumeDetachedEventData& default_instance();
  
  void Swap(VolumeDetachedEventData* other);
  
  // implements Message ----------------------------------------------
  
  VolumeDetachedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VolumeDetachedEventData& from);
  void MergeFrom(const VolumeDetachedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 volume_id = 1;
  inline bool has_volume_id() const;
  inline void clear_volume_id();
  static const int kVolumeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 volume_id() const;
  inline void set_volume_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:VolumeDetachedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 volume_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VolumeDetachedEventData* default_instance_;
};
// -------------------------------------------------------------------

class BlockMappingWrittenEventData : public ::google::protobuf::Message {
 public:
  BlockMappingWrittenEventData();
  virtual ~BlockMappingWrittenEventData();
  
  BlockMappingWrittenEventData(const BlockMappingWrittenEventData& from);
  
  inline BlockMappingWrittenEventData& operator=(const BlockMappingWrittenEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMappingWrittenEventData& default_instance();
  
  void Swap(BlockMappingWrittenEventData* other);
  
  // implements Message ----------------------------------------------
  
  BlockMappingWrittenEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMappingWrittenEventData& from);
  void MergeFrom(const BlockMappingWrittenEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .BlockMappingPairData mapping_pair = 4;
  inline bool has_mapping_pair() const;
  inline void clear_mapping_pair();
  static const int kMappingPairFieldNumber = 4;
  inline const ::BlockMappingPairData& mapping_pair() const;
  inline ::BlockMappingPairData* mutable_mapping_pair();
  
  // @@protoc_insertion_point(class_scope:BlockMappingWrittenEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::BlockMappingPairData* mapping_pair_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockMappingWrittenEventData* default_instance_;
};
// -------------------------------------------------------------------

class BlockMappingWriteFailedEventData : public ::google::protobuf::Message {
 public:
  BlockMappingWriteFailedEventData();
  virtual ~BlockMappingWriteFailedEventData();
  
  BlockMappingWriteFailedEventData(const BlockMappingWriteFailedEventData& from);
  
  inline BlockMappingWriteFailedEventData& operator=(const BlockMappingWriteFailedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMappingWriteFailedEventData& default_instance();
  
  void Swap(BlockMappingWriteFailedEventData* other);
  
  // implements Message ----------------------------------------------
  
  BlockMappingWriteFailedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMappingWriteFailedEventData& from);
  void MergeFrom(const BlockMappingWriteFailedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .BlockMappingPairData mapping_pair = 4;
  inline bool has_mapping_pair() const;
  inline void clear_mapping_pair();
  static const int kMappingPairFieldNumber = 4;
  inline const ::BlockMappingPairData& mapping_pair() const;
  inline ::BlockMappingPairData* mutable_mapping_pair();
  
  // optional int64 write_event_log_id = 3;
  inline bool has_write_event_log_id() const;
  inline void clear_write_event_log_id();
  static const int kWriteEventLogIdFieldNumber = 3;
  inline ::google::protobuf::int64 write_event_log_id() const;
  inline void set_write_event_log_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:BlockMappingWriteFailedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::BlockMappingPairData* mapping_pair_;
  ::google::protobuf::int64 write_event_log_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockMappingWriteFailedEventData* default_instance_;
};
// -------------------------------------------------------------------

class BlockMappingDeletedEventData : public ::google::protobuf::Message {
 public:
  BlockMappingDeletedEventData();
  virtual ~BlockMappingDeletedEventData();
  
  BlockMappingDeletedEventData(const BlockMappingDeletedEventData& from);
  
  inline BlockMappingDeletedEventData& operator=(const BlockMappingDeletedEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMappingDeletedEventData& default_instance();
  
  void Swap(BlockMappingDeletedEventData* other);
  
  // implements Message ----------------------------------------------
  
  BlockMappingDeletedEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMappingDeletedEventData& from);
  void MergeFrom(const BlockMappingDeletedEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .BlockMappingData original_block_mapping = 1;
  inline bool has_original_block_mapping() const;
  inline void clear_original_block_mapping();
  static const int kOriginalBlockMappingFieldNumber = 1;
  inline const ::BlockMappingData& original_block_mapping() const;
  inline ::BlockMappingData* mutable_original_block_mapping();
  
  // @@protoc_insertion_point(class_scope:BlockMappingDeletedEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::BlockMappingData* original_block_mapping_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockMappingDeletedEventData* default_instance_;
};
// -------------------------------------------------------------------

class OphranChunksEventData : public ::google::protobuf::Message {
 public:
  OphranChunksEventData();
  virtual ~OphranChunksEventData();
  
  OphranChunksEventData(const OphranChunksEventData& from);
  
  inline OphranChunksEventData& operator=(const OphranChunksEventData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OphranChunksEventData& default_instance();
  
  void Swap(OphranChunksEventData* other);
  
  // implements Message ----------------------------------------------
  
  OphranChunksEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OphranChunksEventData& from);
  void MergeFrom(const OphranChunksEventData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes chunk_fp = 1;
  inline int chunk_fp_size() const;
  inline void clear_chunk_fp();
  static const int kChunkFpFieldNumber = 1;
  inline const ::std::string& chunk_fp(int index) const;
  inline ::std::string* mutable_chunk_fp(int index);
  inline void set_chunk_fp(int index, const ::std::string& value);
  inline void set_chunk_fp(int index, const char* value);
  inline void set_chunk_fp(int index, const void* value, size_t size);
  inline ::std::string* add_chunk_fp();
  inline void add_chunk_fp(const ::std::string& value);
  inline void add_chunk_fp(const char* value);
  inline void add_chunk_fp(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& chunk_fp() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_chunk_fp();
  
  // @@protoc_insertion_point(class_scope:OphranChunksEventData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> chunk_fp_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OphranChunksEventData* default_instance_;
};
// -------------------------------------------------------------------

class BlockIndexLogfileData : public ::google::protobuf::Message {
 public:
  BlockIndexLogfileData();
  virtual ~BlockIndexLogfileData();
  
  BlockIndexLogfileData(const BlockIndexLogfileData& from);
  
  inline BlockIndexLogfileData& operator=(const BlockIndexLogfileData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockIndexLogfileData& default_instance();
  
  void Swap(BlockIndexLogfileData* other);
  
  // implements Message ----------------------------------------------
  
  BlockIndexLogfileData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockIndexLogfileData& from);
  void MergeFrom(const BlockIndexLogfileData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ContainerTrackerData container_tracker = 2;
  inline bool has_container_tracker() const;
  inline void clear_container_tracker();
  static const int kContainerTrackerFieldNumber = 2;
  inline const ::ContainerTrackerData& container_tracker() const;
  inline ::ContainerTrackerData* mutable_container_tracker();
  
  // @@protoc_insertion_point(class_scope:BlockIndexLogfileData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ContainerTrackerData* container_tracker_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockIndexLogfileData* default_instance_;
};
// -------------------------------------------------------------------

class ChunkIndexLogfileData : public ::google::protobuf::Message {
 public:
  ChunkIndexLogfileData();
  virtual ~ChunkIndexLogfileData();
  
  ChunkIndexLogfileData(const ChunkIndexLogfileData& from);
  
  inline ChunkIndexLogfileData& operator=(const ChunkIndexLogfileData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkIndexLogfileData& default_instance();
  
  void Swap(ChunkIndexLogfileData* other);
  
  // implements Message ----------------------------------------------
  
  ChunkIndexLogfileData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChunkIndexLogfileData& from);
  void MergeFrom(const ChunkIndexLogfileData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ContainerTrackerData container_tracker = 2;
  inline bool has_container_tracker() const;
  inline void clear_container_tracker();
  static const int kContainerTrackerFieldNumber = 2;
  inline const ::ContainerTrackerData& container_tracker() const;
  inline ::ContainerTrackerData* mutable_container_tracker();
  
  // @@protoc_insertion_point(class_scope:ChunkIndexLogfileData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ContainerTrackerData* container_tracker_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChunkIndexLogfileData* default_instance_;
};
// -------------------------------------------------------------------

class BloomFilterLogfileData : public ::google::protobuf::Message {
 public:
  BloomFilterLogfileData();
  virtual ~BloomFilterLogfileData();
  
  BloomFilterLogfileData(const BloomFilterLogfileData& from);
  
  inline BloomFilterLogfileData& operator=(const BloomFilterLogfileData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomFilterLogfileData& default_instance();
  
  void Swap(BloomFilterLogfileData* other);
  
  // implements Message ----------------------------------------------
  
  BloomFilterLogfileData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BloomFilterLogfileData& from);
  void MergeFrom(const BloomFilterLogfileData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 filter_size = 1;
  inline bool has_filter_size() const;
  inline void clear_filter_size();
  static const int kFilterSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 filter_size() const;
  inline void set_filter_size(::google::protobuf::uint64 value);
  
  // optional uint32 k = 2;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 2;
  inline ::google::protobuf::uint32 k() const;
  inline void set_k(::google::protobuf::uint32 value);
  
  // optional .ContainerTrackerData container_tracker = 4;
  inline bool has_container_tracker() const;
  inline void clear_container_tracker();
  static const int kContainerTrackerFieldNumber = 4;
  inline const ::ContainerTrackerData& container_tracker() const;
  inline ::ContainerTrackerData* mutable_container_tracker();
  
  // @@protoc_insertion_point(class_scope:BloomFilterLogfileData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 filter_size_;
  ::google::protobuf::uint32 k_;
  ::ContainerTrackerData* container_tracker_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BloomFilterLogfileData* default_instance_;
};
// -------------------------------------------------------------------

class GarbageCollectionCandidateData : public ::google::protobuf::Message {
 public:
  GarbageCollectionCandidateData();
  virtual ~GarbageCollectionCandidateData();
  
  GarbageCollectionCandidateData(const GarbageCollectionCandidateData& from);
  
  inline GarbageCollectionCandidateData& operator=(const GarbageCollectionCandidateData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GarbageCollectionCandidateData& default_instance();
  
  void Swap(GarbageCollectionCandidateData* other);
  
  // implements Message ----------------------------------------------
  
  GarbageCollectionCandidateData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GarbageCollectionCandidateData& from);
  void MergeFrom(const GarbageCollectionCandidateData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline ::google::protobuf::uint64 address() const;
  inline void set_address(::google::protobuf::uint64 value);
  
  // repeated .GarbageCollectionCandidateItemData item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::GarbageCollectionCandidateItemData& item(int index) const;
  inline ::GarbageCollectionCandidateItemData* mutable_item(int index);
  inline ::GarbageCollectionCandidateItemData* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::GarbageCollectionCandidateItemData >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::GarbageCollectionCandidateItemData >*
      mutable_item();
  
  // optional bool processing = 3;
  inline bool has_processing() const;
  inline void clear_processing();
  static const int kProcessingFieldNumber = 3;
  inline bool processing() const;
  inline void set_processing(bool value);
  
  // optional uint32 unchanged_processing_count = 4;
  inline bool has_unchanged_processing_count() const;
  inline void clear_unchanged_processing_count();
  static const int kUnchangedProcessingCountFieldNumber = 4;
  inline ::google::protobuf::uint32 unchanged_processing_count() const;
  inline void set_unchanged_processing_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:GarbageCollectionCandidateData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 address_;
  ::google::protobuf::RepeatedPtrField< ::GarbageCollectionCandidateItemData > item_;
  bool processing_;
  ::google::protobuf::uint32 unchanged_processing_count_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GarbageCollectionCandidateData* default_instance_;
};
// -------------------------------------------------------------------

class GarbageCollectionCandidateItemData : public ::google::protobuf::Message {
 public:
  GarbageCollectionCandidateItemData();
  virtual ~GarbageCollectionCandidateItemData();
  
  GarbageCollectionCandidateItemData(const GarbageCollectionCandidateItemData& from);
  
  inline GarbageCollectionCandidateItemData& operator=(const GarbageCollectionCandidateItemData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GarbageCollectionCandidateItemData& default_instance();
  
  void Swap(GarbageCollectionCandidateItemData* other);
  
  // implements Message ----------------------------------------------
  
  GarbageCollectionCandidateItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GarbageCollectionCandidateItemData& from);
  void MergeFrom(const GarbageCollectionCandidateItemData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GarbageCollectionCandidateItemData_Type Type;
  static const Type STANDARD = GarbageCollectionCandidateItemData_Type_STANDARD;
  static const Type FAILED = GarbageCollectionCandidateItemData_Type_FAILED;
  static inline bool Type_IsValid(int value) {
    return GarbageCollectionCandidateItemData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GarbageCollectionCandidateItemData_Type_Type_MIN;
  static const Type Type_MAX =
    GarbageCollectionCandidateItemData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GarbageCollectionCandidateItemData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GarbageCollectionCandidateItemData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GarbageCollectionCandidateItemData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GarbageCollectionCandidateItemData_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional bytes fp = 1;
  inline bool has_fp() const;
  inline void clear_fp();
  static const int kFpFieldNumber = 1;
  inline const ::std::string& fp() const;
  inline void set_fp(const ::std::string& value);
  inline void set_fp(const char* value);
  inline void set_fp(const void* value, size_t size);
  inline ::std::string* mutable_fp();
  
  // optional .GarbageCollectionCandidateItemData.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::GarbageCollectionCandidateItemData_Type type() const;
  inline void set_type(::GarbageCollectionCandidateItemData_Type value);
  
  // @@protoc_insertion_point(class_scope:GarbageCollectionCandidateItemData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* fp_;
  static const ::std::string _default_fp_;
  int type_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GarbageCollectionCandidateItemData* default_instance_;
};
// -------------------------------------------------------------------

class GarbageCollectionInfoData : public ::google::protobuf::Message {
 public:
  GarbageCollectionInfoData();
  virtual ~GarbageCollectionInfoData();
  
  GarbageCollectionInfoData(const GarbageCollectionInfoData& from);
  
  inline GarbageCollectionInfoData& operator=(const GarbageCollectionInfoData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GarbageCollectionInfoData& default_instance();
  
  void Swap(GarbageCollectionInfoData* other);
  
  // implements Message ----------------------------------------------
  
  GarbageCollectionInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GarbageCollectionInfoData& from);
  void MergeFrom(const GarbageCollectionInfoData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int64 replayed_block_failed_event_log_id = 1;
  inline int replayed_block_failed_event_log_id_size() const;
  inline void clear_replayed_block_failed_event_log_id();
  static const int kReplayedBlockFailedEventLogIdFieldNumber = 1;
  inline ::google::protobuf::int64 replayed_block_failed_event_log_id(int index) const;
  inline void set_replayed_block_failed_event_log_id(int index, ::google::protobuf::int64 value);
  inline void add_replayed_block_failed_event_log_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      replayed_block_failed_event_log_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_replayed_block_failed_event_log_id();
  
  // @@protoc_insertion_point(class_scope:GarbageCollectionInfoData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > replayed_block_failed_event_log_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GarbageCollectionInfoData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerGreedyGCCandidateItemData : public ::google::protobuf::Message {
 public:
  ContainerGreedyGCCandidateItemData();
  virtual ~ContainerGreedyGCCandidateItemData();
  
  ContainerGreedyGCCandidateItemData(const ContainerGreedyGCCandidateItemData& from);
  
  inline ContainerGreedyGCCandidateItemData& operator=(const ContainerGreedyGCCandidateItemData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerGreedyGCCandidateItemData& default_instance();
  
  void Swap(ContainerGreedyGCCandidateItemData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerGreedyGCCandidateItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerGreedyGCCandidateItemData& from);
  void MergeFrom(const ContainerGreedyGCCandidateItemData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline ::google::protobuf::uint64 address() const;
  inline void set_address(::google::protobuf::uint64 value);
  
  // optional uint32 active_data_size = 2;
  inline bool has_active_data_size() const;
  inline void clear_active_data_size();
  static const int kActiveDataSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 active_data_size() const;
  inline void set_active_data_size(::google::protobuf::uint32 value);
  
  // optional uint32 active_item_count = 3;
  inline bool has_active_item_count() const;
  inline void clear_active_item_count();
  static const int kActiveItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 active_item_count() const;
  inline void set_active_item_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ContainerGreedyGCCandidateItemData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 address_;
  ::google::protobuf::uint32 active_data_size_;
  ::google::protobuf::uint32 active_item_count_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerGreedyGCCandidateItemData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerGreedyGCCandidateData : public ::google::protobuf::Message {
 public:
  ContainerGreedyGCCandidateData();
  virtual ~ContainerGreedyGCCandidateData();
  
  ContainerGreedyGCCandidateData(const ContainerGreedyGCCandidateData& from);
  
  inline ContainerGreedyGCCandidateData& operator=(const ContainerGreedyGCCandidateData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerGreedyGCCandidateData& default_instance();
  
  void Swap(ContainerGreedyGCCandidateData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerGreedyGCCandidateData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerGreedyGCCandidateData& from);
  void MergeFrom(const ContainerGreedyGCCandidateData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ContainerGreedyGCCandidateItemData item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::ContainerGreedyGCCandidateItemData& item(int index) const;
  inline ::ContainerGreedyGCCandidateItemData* mutable_item(int index);
  inline ::ContainerGreedyGCCandidateItemData* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::ContainerGreedyGCCandidateItemData >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContainerGreedyGCCandidateItemData >*
      mutable_item();
  
  // @@protoc_insertion_point(class_scope:ContainerGreedyGCCandidateData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::ContainerGreedyGCCandidateItemData > item_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerGreedyGCCandidateData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerStorageAddressData : public ::google::protobuf::Message {
 public:
  ContainerStorageAddressData();
  virtual ~ContainerStorageAddressData();
  
  ContainerStorageAddressData(const ContainerStorageAddressData& from);
  
  inline ContainerStorageAddressData& operator=(const ContainerStorageAddressData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerStorageAddressData& default_instance();
  
  void Swap(ContainerStorageAddressData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerStorageAddressData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerStorageAddressData& from);
  void MergeFrom(const ContainerStorageAddressData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 primary_id = 3;
  inline bool has_primary_id() const;
  inline void clear_primary_id();
  static const int kPrimaryIdFieldNumber = 3;
  inline ::google::protobuf::uint64 primary_id() const;
  inline void set_primary_id(::google::protobuf::uint64 value);
  
  // optional uint32 file_index = 1;
  inline bool has_file_index() const;
  inline void clear_file_index();
  static const int kFileIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 file_index() const;
  inline void set_file_index(::google::protobuf::uint32 value);
  
  // optional uint64 file_offset = 2;
  inline bool has_file_offset() const;
  inline void clear_file_offset();
  static const int kFileOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 file_offset() const;
  inline void set_file_offset(::google::protobuf::uint64 value);
  
  // optional uint64 log_id = 4;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 4;
  inline ::google::protobuf::uint64 log_id() const;
  inline void set_log_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ContainerStorageAddressData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 primary_id_;
  ::google::protobuf::uint32 file_index_;
  ::google::protobuf::uint64 file_offset_;
  ::google::protobuf::uint64 log_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerStorageAddressData* default_instance_;
};
// -------------------------------------------------------------------

class BitmapAllocatorItemData : public ::google::protobuf::Message {
 public:
  BitmapAllocatorItemData();
  virtual ~BitmapAllocatorItemData();
  
  BitmapAllocatorItemData(const BitmapAllocatorItemData& from);
  
  inline BitmapAllocatorItemData& operator=(const BitmapAllocatorItemData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BitmapAllocatorItemData& default_instance();
  
  void Swap(BitmapAllocatorItemData* other);
  
  // implements Message ----------------------------------------------
  
  BitmapAllocatorItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitmapAllocatorItemData& from);
  void MergeFrom(const BitmapAllocatorItemData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 free_count = 1;
  inline bool has_free_count() const;
  inline void clear_free_count();
  static const int kFreeCountFieldNumber = 1;
  inline ::google::protobuf::uint32 free_count() const;
  inline void set_free_count(::google::protobuf::uint32 value);
  
  // optional bytes bitmap = 2;
  inline bool has_bitmap() const;
  inline void clear_bitmap();
  static const int kBitmapFieldNumber = 2;
  inline const ::std::string& bitmap() const;
  inline void set_bitmap(const ::std::string& value);
  inline void set_bitmap(const char* value);
  inline void set_bitmap(const void* value, size_t size);
  inline ::std::string* mutable_bitmap();
  
  // @@protoc_insertion_point(class_scope:BitmapAllocatorItemData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 free_count_;
  ::std::string* bitmap_;
  static const ::std::string _default_bitmap_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BitmapAllocatorItemData* default_instance_;
};
// -------------------------------------------------------------------

class ContainerTrackerData : public ::google::protobuf::Message {
 public:
  ContainerTrackerData();
  virtual ~ContainerTrackerData();
  
  ContainerTrackerData(const ContainerTrackerData& from);
  
  inline ContainerTrackerData& operator=(const ContainerTrackerData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerTrackerData& default_instance();
  
  void Swap(ContainerTrackerData* other);
  
  // implements Message ----------------------------------------------
  
  ContainerTrackerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerTrackerData& from);
  void MergeFrom(const ContainerTrackerData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint64 container_id = 1 [packed = true];
  inline int container_id_size() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 container_id(int index) const;
  inline void set_container_id(int index, ::google::protobuf::uint64 value);
  inline void add_container_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      container_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_container_id();
  
  // optional uint64 highest_seen_container_id = 2;
  inline bool has_highest_seen_container_id() const;
  inline void clear_highest_seen_container_id();
  static const int kHighestSeenContainerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 highest_seen_container_id() const;
  inline void set_highest_seen_container_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ContainerTrackerData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > container_id_;
  mutable int _container_id_cached_byte_size_;
  ::google::protobuf::uint64 highest_seen_container_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ContainerTrackerData* default_instance_;
};
// -------------------------------------------------------------------

class LogReplayIDData : public ::google::protobuf::Message {
 public:
  LogReplayIDData();
  virtual ~LogReplayIDData();
  
  LogReplayIDData(const LogReplayIDData& from);
  
  inline LogReplayIDData& operator=(const LogReplayIDData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogReplayIDData& default_instance();
  
  void Swap(LogReplayIDData* other);
  
  // implements Message ----------------------------------------------
  
  LogReplayIDData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogReplayIDData& from);
  void MergeFrom(const LogReplayIDData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 replay_id = 1;
  inline bool has_replay_id() const;
  inline void clear_replay_id();
  static const int kReplayIdFieldNumber = 1;
  inline ::google::protobuf::int64 replay_id() const;
  inline void set_replay_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:LogReplayIDData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 replay_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogReplayIDData* default_instance_;
};
// -------------------------------------------------------------------

class LogLogIDData : public ::google::protobuf::Message {
 public:
  LogLogIDData();
  virtual ~LogLogIDData();
  
  LogLogIDData(const LogLogIDData& from);
  
  inline LogLogIDData& operator=(const LogLogIDData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogLogIDData& default_instance();
  
  void Swap(LogLogIDData* other);
  
  // implements Message ----------------------------------------------
  
  LogLogIDData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogLogIDData& from);
  void MergeFrom(const LogLogIDData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 log_id = 1;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 1;
  inline ::google::protobuf::int64 log_id() const;
  inline void set_log_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:LogLogIDData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 log_id_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogLogIDData* default_instance_;
};
// -------------------------------------------------------------------

class LogStateData : public ::google::protobuf::Message {
 public:
  LogStateData();
  virtual ~LogStateData();
  
  LogStateData(const LogStateData& from);
  
  inline LogStateData& operator=(const LogStateData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogStateData& default_instance();
  
  void Swap(LogStateData* other);
  
  // implements Message ----------------------------------------------
  
  LogStateData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogStateData& from);
  void MergeFrom(const LogStateData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 limit_id = 1;
  inline bool has_limit_id() const;
  inline void clear_limit_id();
  static const int kLimitIdFieldNumber = 1;
  inline ::google::protobuf::int64 limit_id() const;
  inline void set_limit_id(::google::protobuf::int64 value);
  
  // optional int64 log_entry_width = 2;
  inline bool has_log_entry_width() const;
  inline void clear_log_entry_width();
  static const int kLogEntryWidthFieldNumber = 2;
  inline ::google::protobuf::int64 log_entry_width() const;
  inline void set_log_entry_width(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:LogStateData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 limit_id_;
  ::google::protobuf::int64 log_entry_width_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogStateData* default_instance_;
};
// -------------------------------------------------------------------

class MessageData : public ::google::protobuf::Message {
 public:
  MessageData();
  virtual ~MessageData();
  
  MessageData(const MessageData& from);
  
  inline MessageData& operator=(const MessageData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageData& default_instance();
  
  void Swap(MessageData* other);
  
  // implements Message ----------------------------------------------
  
  MessageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageData& from);
  void MergeFrom(const MessageData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // @@protoc_insertion_point(class_scope:MessageData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MessageData* default_instance_;
};
// -------------------------------------------------------------------

class BlockWriteFailedData : public ::google::protobuf::Message {
 public:
  BlockWriteFailedData();
  virtual ~BlockWriteFailedData();
  
  BlockWriteFailedData(const BlockWriteFailedData& from);
  
  inline BlockWriteFailedData& operator=(const BlockWriteFailedData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockWriteFailedData& default_instance();
  
  void Swap(BlockWriteFailedData* other);
  
  // implements Message ----------------------------------------------
  
  BlockWriteFailedData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockWriteFailedData& from);
  void MergeFrom(const BlockWriteFailedData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:BlockWriteFailedData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_dedupv1_2eproto();
  friend void protobuf_AssignDesc_dedupv1_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockWriteFailedData* default_instance_;
};
// ===================================================================


// ===================================================================

// BlockMappingData

// optional uint64 block_id = 1;
inline bool BlockMappingData::has_block_id() const {
  return _has_bit(0);
}
inline void BlockMappingData::clear_block_id() {
  block_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 BlockMappingData::block_id() const {
  return block_id_;
}
inline void BlockMappingData::set_block_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  block_id_ = value;
}

// repeated .BlockMappingItemData items = 2;
inline int BlockMappingData::items_size() const {
  return items_.size();
}
inline void BlockMappingData::clear_items() {
  items_.Clear();
}
inline const ::BlockMappingItemData& BlockMappingData::items(int index) const {
  return items_.Get(index);
}
inline ::BlockMappingItemData* BlockMappingData::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::BlockMappingItemData* BlockMappingData::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BlockMappingItemData >&
BlockMappingData::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BlockMappingItemData >*
BlockMappingData::mutable_items() {
  return &items_;
}

// optional uint32 version_counter = 3;
inline bool BlockMappingData::has_version_counter() const {
  return _has_bit(2);
}
inline void BlockMappingData::clear_version_counter() {
  version_counter_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 BlockMappingData::version_counter() const {
  return version_counter_;
}
inline void BlockMappingData::set_version_counter(::google::protobuf::uint32 value) {
  _set_bit(2);
  version_counter_ = value;
}

// optional uint64 event_log_id = 6;
inline bool BlockMappingData::has_event_log_id() const {
  return _has_bit(3);
}
inline void BlockMappingData::clear_event_log_id() {
  event_log_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 BlockMappingData::event_log_id() const {
  return event_log_id_;
}
inline void BlockMappingData::set_event_log_id(::google::protobuf::uint64 value) {
  _set_bit(3);
  event_log_id_ = value;
}

// optional bytes checksum = 7;
inline bool BlockMappingData::has_checksum() const {
  return _has_bit(4);
}
inline void BlockMappingData::clear_checksum() {
  if (checksum_ != &_default_checksum_) {
    checksum_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& BlockMappingData::checksum() const {
  return *checksum_;
}
inline void BlockMappingData::set_checksum(const ::std::string& value) {
  _set_bit(4);
  if (checksum_ == &_default_checksum_) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(value);
}
inline void BlockMappingData::set_checksum(const char* value) {
  _set_bit(4);
  if (checksum_ == &_default_checksum_) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(value);
}
inline void BlockMappingData::set_checksum(const void* value, size_t size) {
  _set_bit(4);
  if (checksum_ == &_default_checksum_) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockMappingData::mutable_checksum() {
  _set_bit(4);
  if (checksum_ == &_default_checksum_) {
    checksum_ = new ::std::string;
  }
  return checksum_;
}

// -------------------------------------------------------------------

// BlockMappingPairData

// optional uint64 block_id = 1;
inline bool BlockMappingPairData::has_block_id() const {
  return _has_bit(0);
}
inline void BlockMappingPairData::clear_block_id() {
  block_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 BlockMappingPairData::block_id() const {
  return block_id_;
}
inline void BlockMappingPairData::set_block_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  block_id_ = value;
}

// optional uint32 version_counter = 2;
inline bool BlockMappingPairData::has_version_counter() const {
  return _has_bit(1);
}
inline void BlockMappingPairData::clear_version_counter() {
  version_counter_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 BlockMappingPairData::version_counter() const {
  return version_counter_;
}
inline void BlockMappingPairData::set_version_counter(::google::protobuf::uint32 value) {
  _set_bit(1);
  version_counter_ = value;
}

// repeated .BlockMappingPairItemData items = 3;
inline int BlockMappingPairData::items_size() const {
  return items_.size();
}
inline void BlockMappingPairData::clear_items() {
  items_.Clear();
}
inline const ::BlockMappingPairItemData& BlockMappingPairData::items(int index) const {
  return items_.Get(index);
}
inline ::BlockMappingPairItemData* BlockMappingPairData::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::BlockMappingPairItemData* BlockMappingPairData::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BlockMappingPairItemData >&
BlockMappingPairData::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BlockMappingPairItemData >*
BlockMappingPairData::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// BlockMappingPairItemData

// required bytes fp = 1;
inline bool BlockMappingPairItemData::has_fp() const {
  return _has_bit(0);
}
inline void BlockMappingPairItemData::clear_fp() {
  if (fp_ != &_default_fp_) {
    fp_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BlockMappingPairItemData::fp() const {
  return *fp_;
}
inline void BlockMappingPairItemData::set_fp(const ::std::string& value) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(value);
}
inline void BlockMappingPairItemData::set_fp(const char* value) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(value);
}
inline void BlockMappingPairItemData::set_fp(const void* value, size_t size) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockMappingPairItemData::mutable_fp() {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  return fp_;
}

// optional uint64 data_address = 2;
inline bool BlockMappingPairItemData::has_data_address() const {
  return _has_bit(1);
}
inline void BlockMappingPairItemData::clear_data_address() {
  data_address_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 BlockMappingPairItemData::data_address() const {
  return data_address_;
}
inline void BlockMappingPairItemData::set_data_address(::google::protobuf::uint64 value) {
  _set_bit(1);
  data_address_ = value;
}

// optional uint32 chunk_offset = 3;
inline bool BlockMappingPairItemData::has_chunk_offset() const {
  return _has_bit(2);
}
inline void BlockMappingPairItemData::clear_chunk_offset() {
  chunk_offset_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 BlockMappingPairItemData::chunk_offset() const {
  return chunk_offset_;
}
inline void BlockMappingPairItemData::set_chunk_offset(::google::protobuf::uint32 value) {
  _set_bit(2);
  chunk_offset_ = value;
}

// optional uint32 size = 4;
inline bool BlockMappingPairItemData::has_size() const {
  return _has_bit(3);
}
inline void BlockMappingPairItemData::clear_size() {
  size_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 BlockMappingPairItemData::size() const {
  return size_;
}
inline void BlockMappingPairItemData::set_size(::google::protobuf::uint32 value) {
  _set_bit(3);
  size_ = value;
}

// optional int32 usage_count_modifier = 5;
inline bool BlockMappingPairItemData::has_usage_count_modifier() const {
  return _has_bit(4);
}
inline void BlockMappingPairItemData::clear_usage_count_modifier() {
  usage_count_modifier_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 BlockMappingPairItemData::usage_count_modifier() const {
  return usage_count_modifier_;
}
inline void BlockMappingPairItemData::set_usage_count_modifier(::google::protobuf::int32 value) {
  _set_bit(4);
  usage_count_modifier_ = value;
}

// -------------------------------------------------------------------

// BlockMappingItemData

// required bytes fp = 1;
inline bool BlockMappingItemData::has_fp() const {
  return _has_bit(0);
}
inline void BlockMappingItemData::clear_fp() {
  if (fp_ != &_default_fp_) {
    fp_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BlockMappingItemData::fp() const {
  return *fp_;
}
inline void BlockMappingItemData::set_fp(const ::std::string& value) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(value);
}
inline void BlockMappingItemData::set_fp(const char* value) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(value);
}
inline void BlockMappingItemData::set_fp(const void* value, size_t size) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockMappingItemData::mutable_fp() {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  return fp_;
}

// optional uint64 data_address = 2;
inline bool BlockMappingItemData::has_data_address() const {
  return _has_bit(1);
}
inline void BlockMappingItemData::clear_data_address() {
  data_address_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 BlockMappingItemData::data_address() const {
  return data_address_;
}
inline void BlockMappingItemData::set_data_address(::google::protobuf::uint64 value) {
  _set_bit(1);
  data_address_ = value;
}

// optional uint32 chunk_offset = 3;
inline bool BlockMappingItemData::has_chunk_offset() const {
  return _has_bit(2);
}
inline void BlockMappingItemData::clear_chunk_offset() {
  chunk_offset_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 BlockMappingItemData::chunk_offset() const {
  return chunk_offset_;
}
inline void BlockMappingItemData::set_chunk_offset(::google::protobuf::uint32 value) {
  _set_bit(2);
  chunk_offset_ = value;
}

// optional uint32 size = 4;
inline bool BlockMappingItemData::has_size() const {
  return _has_bit(3);
}
inline void BlockMappingItemData::clear_size() {
  size_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 BlockMappingItemData::size() const {
  return size_;
}
inline void BlockMappingItemData::set_size(::google::protobuf::uint32 value) {
  _set_bit(3);
  size_ = value;
}

// -------------------------------------------------------------------

// ChunkMappingData

// optional uint64 data_address = 1;
inline bool ChunkMappingData::has_data_address() const {
  return _has_bit(0);
}
inline void ChunkMappingData::clear_data_address() {
  data_address_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ChunkMappingData::data_address() const {
  return data_address_;
}
inline void ChunkMappingData::set_data_address(::google::protobuf::uint64 value) {
  _set_bit(0);
  data_address_ = value;
}

// optional int64 usage_count = 2;
inline bool ChunkMappingData::has_usage_count() const {
  return _has_bit(1);
}
inline void ChunkMappingData::clear_usage_count() {
  usage_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 ChunkMappingData::usage_count() const {
  return usage_count_;
}
inline void ChunkMappingData::set_usage_count(::google::protobuf::int64 value) {
  _set_bit(1);
  usage_count_ = value;
}

// optional uint64 usage_count_change_log_id = 3;
inline bool ChunkMappingData::has_usage_count_change_log_id() const {
  return _has_bit(2);
}
inline void ChunkMappingData::clear_usage_count_change_log_id() {
  usage_count_change_log_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 ChunkMappingData::usage_count_change_log_id() const {
  return usage_count_change_log_id_;
}
inline void ChunkMappingData::set_usage_count_change_log_id(::google::protobuf::uint64 value) {
  _set_bit(2);
  usage_count_change_log_id_ = value;
}

// optional uint64 usage_count_failed_write_change_log_id = 4;
inline bool ChunkMappingData::has_usage_count_failed_write_change_log_id() const {
  return _has_bit(3);
}
inline void ChunkMappingData::clear_usage_count_failed_write_change_log_id() {
  usage_count_failed_write_change_log_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 ChunkMappingData::usage_count_failed_write_change_log_id() const {
  return usage_count_failed_write_change_log_id_;
}
inline void ChunkMappingData::set_usage_count_failed_write_change_log_id(::google::protobuf::uint64 value) {
  _set_bit(3);
  usage_count_failed_write_change_log_id_ = value;
}

// -------------------------------------------------------------------

// ContainerData

// optional uint64 primary_id = 1;
inline bool ContainerData::has_primary_id() const {
  return _has_bit(0);
}
inline void ContainerData::clear_primary_id() {
  primary_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerData::primary_id() const {
  return primary_id_;
}
inline void ContainerData::set_primary_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  primary_id_ = value;
}

// optional uint32 container_size = 2;
inline bool ContainerData::has_container_size() const {
  return _has_bit(1);
}
inline void ContainerData::clear_container_size() {
  container_size_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ContainerData::container_size() const {
  return container_size_;
}
inline void ContainerData::set_container_size(::google::protobuf::uint32 value) {
  _set_bit(1);
  container_size_ = value;
}

// repeated .ContainerItemData items = 3;
inline int ContainerData::items_size() const {
  return items_.size();
}
inline void ContainerData::clear_items() {
  items_.Clear();
}
inline const ::ContainerItemData& ContainerData::items(int index) const {
  return items_.Get(index);
}
inline ::ContainerItemData* ContainerData::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::ContainerItemData* ContainerData::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContainerItemData >&
ContainerData::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContainerItemData >*
ContainerData::mutable_items() {
  return &items_;
}

// optional uint32 commit_time = 5;
inline bool ContainerData::has_commit_time() const {
  return _has_bit(3);
}
inline void ContainerData::clear_commit_time() {
  commit_time_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 ContainerData::commit_time() const {
  return commit_time_;
}
inline void ContainerData::set_commit_time(::google::protobuf::uint32 value) {
  _set_bit(3);
  commit_time_ = value;
}

// optional uint32 checksum = 7;
inline bool ContainerData::has_checksum() const {
  return _has_bit(4);
}
inline void ContainerData::clear_checksum() {
  checksum_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 ContainerData::checksum() const {
  return checksum_;
}
inline void ContainerData::set_checksum(::google::protobuf::uint32 value) {
  _set_bit(4);
  checksum_ = value;
}

// -------------------------------------------------------------------

// ContainerItemData

// optional bytes fp = 1;
inline bool ContainerItemData::has_fp() const {
  return _has_bit(0);
}
inline void ContainerItemData::clear_fp() {
  if (fp_ != &_default_fp_) {
    fp_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ContainerItemData::fp() const {
  return *fp_;
}
inline void ContainerItemData::set_fp(const ::std::string& value) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(value);
}
inline void ContainerItemData::set_fp(const char* value) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(value);
}
inline void ContainerItemData::set_fp(const void* value, size_t size) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainerItemData::mutable_fp() {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  return fp_;
}

// optional uint32 position_offset = 2;
inline bool ContainerItemData::has_position_offset() const {
  return _has_bit(1);
}
inline void ContainerItemData::clear_position_offset() {
  position_offset_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ContainerItemData::position_offset() const {
  return position_offset_;
}
inline void ContainerItemData::set_position_offset(::google::protobuf::uint32 value) {
  _set_bit(1);
  position_offset_ = value;
}

// optional uint32 item_size = 3;
inline bool ContainerItemData::has_item_size() const {
  return _has_bit(2);
}
inline void ContainerItemData::clear_item_size() {
  item_size_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ContainerItemData::item_size() const {
  return item_size_;
}
inline void ContainerItemData::set_item_size(::google::protobuf::uint32 value) {
  _set_bit(2);
  item_size_ = value;
}

// optional uint32 raw_size = 4;
inline bool ContainerItemData::has_raw_size() const {
  return _has_bit(3);
}
inline void ContainerItemData::clear_raw_size() {
  raw_size_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 ContainerItemData::raw_size() const {
  return raw_size_;
}
inline void ContainerItemData::set_raw_size(::google::protobuf::uint32 value) {
  _set_bit(3);
  raw_size_ = value;
}

// optional bool deleted = 5;
inline bool ContainerItemData::has_deleted() const {
  return _has_bit(4);
}
inline void ContainerItemData::clear_deleted() {
  deleted_ = false;
  _clear_bit(4);
}
inline bool ContainerItemData::deleted() const {
  return deleted_;
}
inline void ContainerItemData::set_deleted(bool value) {
  _set_bit(4);
  deleted_ = value;
}

// optional uint64 original_id = 6;
inline bool ContainerItemData::has_original_id() const {
  return _has_bit(5);
}
inline void ContainerItemData::clear_original_id() {
  original_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::uint64 ContainerItemData::original_id() const {
  return original_id_;
}
inline void ContainerItemData::set_original_id(::google::protobuf::uint64 value) {
  _set_bit(5);
  original_id_ = value;
}

// -------------------------------------------------------------------

// ContainerItemValueData

// optional uint32 on_disk_size = 3;
inline bool ContainerItemValueData::has_on_disk_size() const {
  return _has_bit(0);
}
inline void ContainerItemValueData::clear_on_disk_size() {
  on_disk_size_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 ContainerItemValueData::on_disk_size() const {
  return on_disk_size_;
}
inline void ContainerItemValueData::set_on_disk_size(::google::protobuf::uint32 value) {
  _set_bit(0);
  on_disk_size_ = value;
}

// optional .CompressionMode compression = 4 [default = COMPRESSION_NO];
inline bool ContainerItemValueData::has_compression() const {
  return _has_bit(1);
}
inline void ContainerItemValueData::clear_compression() {
  compression_ = 0;
  _clear_bit(1);
}
inline CompressionMode ContainerItemValueData::compression() const {
  return static_cast< CompressionMode >(compression_);
}
inline void ContainerItemValueData::set_compression(CompressionMode value) {
  GOOGLE_DCHECK(CompressionMode_IsValid(value));
  _set_bit(1);
  compression_ = value;
}

// -------------------------------------------------------------------

// Limit

// required fixed32 size = 1;
inline bool Limit::has_size() const {
  return _has_bit(0);
}
inline void Limit::clear_size() {
  size_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 Limit::size() const {
  return size_;
}
inline void Limit::set_size(::google::protobuf::uint32 value) {
  _set_bit(0);
  size_ = value;
}

// -------------------------------------------------------------------

// ContainerFileData

// optional string filename = 1;
inline bool ContainerFileData::has_filename() const {
  return _has_bit(0);
}
inline void ContainerFileData::clear_filename() {
  if (filename_ != &_default_filename_) {
    filename_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ContainerFileData::filename() const {
  return *filename_;
}
inline void ContainerFileData::set_filename(const ::std::string& value) {
  _set_bit(0);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ContainerFileData::set_filename(const char* value) {
  _set_bit(0);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ContainerFileData::set_filename(const char* value, size_t size) {
  _set_bit(0);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainerFileData::mutable_filename() {
  _set_bit(0);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  return filename_;
}

// optional uint64 file_size = 2;
inline bool ContainerFileData::has_file_size() const {
  return _has_bit(1);
}
inline void ContainerFileData::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 ContainerFileData::file_size() const {
  return file_size_;
}
inline void ContainerFileData::set_file_size(::google::protobuf::uint64 value) {
  _set_bit(1);
  file_size_ = value;
}

// optional string uuid = 3;
inline bool ContainerFileData::has_uuid() const {
  return _has_bit(2);
}
inline void ContainerFileData::clear_uuid() {
  if (uuid_ != &_default_uuid_) {
    uuid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ContainerFileData::uuid() const {
  return *uuid_;
}
inline void ContainerFileData::set_uuid(const ::std::string& value) {
  _set_bit(2);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ContainerFileData::set_uuid(const char* value) {
  _set_bit(2);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ContainerFileData::set_uuid(const char* value, size_t size) {
  _set_bit(2);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainerFileData::mutable_uuid() {
  _set_bit(2);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}

// -------------------------------------------------------------------

// ContainerSuperblockData

// optional string uuid = 1;
inline bool ContainerSuperblockData::has_uuid() const {
  return _has_bit(0);
}
inline void ContainerSuperblockData::clear_uuid() {
  if (uuid_ != &_default_uuid_) {
    uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ContainerSuperblockData::uuid() const {
  return *uuid_;
}
inline void ContainerSuperblockData::set_uuid(const ::std::string& value) {
  _set_bit(0);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ContainerSuperblockData::set_uuid(const char* value) {
  _set_bit(0);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ContainerSuperblockData::set_uuid(const char* value, size_t size) {
  _set_bit(0);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainerSuperblockData::mutable_uuid() {
  _set_bit(0);
  if (uuid_ == &_default_uuid_) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}

// -------------------------------------------------------------------

// ContainerLogfileData

// optional uint64 last_given_container_id = 1;
inline bool ContainerLogfileData::has_last_given_container_id() const {
  return _has_bit(0);
}
inline void ContainerLogfileData::clear_last_given_container_id() {
  last_given_container_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerLogfileData::last_given_container_id() const {
  return last_given_container_id_;
}
inline void ContainerLogfileData::set_last_given_container_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  last_given_container_id_ = value;
}

// optional uint32 container_size = 2;
inline bool ContainerLogfileData::has_container_size() const {
  return _has_bit(1);
}
inline void ContainerLogfileData::clear_container_size() {
  container_size_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ContainerLogfileData::container_size() const {
  return container_size_;
}
inline void ContainerLogfileData::set_container_size(::google::protobuf::uint32 value) {
  _set_bit(1);
  container_size_ = value;
}

// optional uint32 size = 3;
inline bool ContainerLogfileData::has_size() const {
  return _has_bit(2);
}
inline void ContainerLogfileData::clear_size() {
  size_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ContainerLogfileData::size() const {
  return size_;
}
inline void ContainerLogfileData::set_size(::google::protobuf::uint32 value) {
  _set_bit(2);
  size_ = value;
}

// repeated .ContainerFileData file = 4;
inline int ContainerLogfileData::file_size() const {
  return file_.size();
}
inline void ContainerLogfileData::clear_file() {
  file_.Clear();
}
inline const ::ContainerFileData& ContainerLogfileData::file(int index) const {
  return file_.Get(index);
}
inline ::ContainerFileData* ContainerLogfileData::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::ContainerFileData* ContainerLogfileData::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContainerFileData >&
ContainerLogfileData::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContainerFileData >*
ContainerLogfileData::mutable_file() {
  return &file_;
}

// optional bool contains_superblock = 5;
inline bool ContainerLogfileData::has_contains_superblock() const {
  return _has_bit(4);
}
inline void ContainerLogfileData::clear_contains_superblock() {
  contains_superblock_ = false;
  _clear_bit(4);
}
inline bool ContainerLogfileData::contains_superblock() const {
  return contains_superblock_;
}
inline void ContainerLogfileData::set_contains_superblock(bool value) {
  _set_bit(4);
  contains_superblock_ = value;
}

// -------------------------------------------------------------------

// SystemStartEventData

// optional bool create = 1;
inline bool SystemStartEventData::has_create() const {
  return _has_bit(0);
}
inline void SystemStartEventData::clear_create() {
  create_ = false;
  _clear_bit(0);
}
inline bool SystemStartEventData::create() const {
  return create_;
}
inline void SystemStartEventData::set_create(bool value) {
  _set_bit(0);
  create_ = value;
}

// optional bool dirty = 2;
inline bool SystemStartEventData::has_dirty() const {
  return _has_bit(1);
}
inline void SystemStartEventData::clear_dirty() {
  dirty_ = false;
  _clear_bit(1);
}
inline bool SystemStartEventData::dirty() const {
  return dirty_;
}
inline void SystemStartEventData::set_dirty(bool value) {
  _set_bit(1);
  dirty_ = value;
}

// optional bool forced = 3;
inline bool SystemStartEventData::has_forced() const {
  return _has_bit(2);
}
inline void SystemStartEventData::clear_forced() {
  forced_ = false;
  _clear_bit(2);
}
inline bool SystemStartEventData::forced() const {
  return forced_;
}
inline void SystemStartEventData::set_forced(bool value) {
  _set_bit(2);
  forced_ = value;
}

// optional bool crashed = 4;
inline bool SystemStartEventData::has_crashed() const {
  return _has_bit(3);
}
inline void SystemStartEventData::clear_crashed() {
  crashed_ = false;
  _clear_bit(3);
}
inline bool SystemStartEventData::crashed() const {
  return crashed_;
}
inline void SystemStartEventData::set_crashed(bool value) {
  _set_bit(3);
  crashed_ = value;
}

// -------------------------------------------------------------------

// ReplayStartEventData

// optional int32 replay_type = 1;
inline bool ReplayStartEventData::has_replay_type() const {
  return _has_bit(0);
}
inline void ReplayStartEventData::clear_replay_type() {
  replay_type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ReplayStartEventData::replay_type() const {
  return replay_type_;
}
inline void ReplayStartEventData::set_replay_type(::google::protobuf::int32 value) {
  _set_bit(0);
  replay_type_ = value;
}

// optional uint64 replay_id = 3;
inline bool ReplayStartEventData::has_replay_id() const {
  return _has_bit(1);
}
inline void ReplayStartEventData::clear_replay_id() {
  replay_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 ReplayStartEventData::replay_id() const {
  return replay_id_;
}
inline void ReplayStartEventData::set_replay_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  replay_id_ = value;
}

// optional uint64 log_id = 4;
inline bool ReplayStartEventData::has_log_id() const {
  return _has_bit(2);
}
inline void ReplayStartEventData::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 ReplayStartEventData::log_id() const {
  return log_id_;
}
inline void ReplayStartEventData::set_log_id(::google::protobuf::uint64 value) {
  _set_bit(2);
  log_id_ = value;
}

// optional bool full_log_replay = 5;
inline bool ReplayStartEventData::has_full_log_replay() const {
  return _has_bit(3);
}
inline void ReplayStartEventData::clear_full_log_replay() {
  full_log_replay_ = false;
  _clear_bit(3);
}
inline bool ReplayStartEventData::full_log_replay() const {
  return full_log_replay_;
}
inline void ReplayStartEventData::set_full_log_replay(bool value) {
  _set_bit(3);
  full_log_replay_ = value;
}

// -------------------------------------------------------------------

// ReplayStopEventData

// optional int32 replay_type = 1;
inline bool ReplayStopEventData::has_replay_type() const {
  return _has_bit(0);
}
inline void ReplayStopEventData::clear_replay_type() {
  replay_type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ReplayStopEventData::replay_type() const {
  return replay_type_;
}
inline void ReplayStopEventData::set_replay_type(::google::protobuf::int32 value) {
  _set_bit(0);
  replay_type_ = value;
}

// optional bool success = 2;
inline bool ReplayStopEventData::has_success() const {
  return _has_bit(1);
}
inline void ReplayStopEventData::clear_success() {
  success_ = false;
  _clear_bit(1);
}
inline bool ReplayStopEventData::success() const {
  return success_;
}
inline void ReplayStopEventData::set_success(bool value) {
  _set_bit(1);
  success_ = value;
}

// optional uint64 replay_id = 3;
inline bool ReplayStopEventData::has_replay_id() const {
  return _has_bit(2);
}
inline void ReplayStopEventData::clear_replay_id() {
  replay_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 ReplayStopEventData::replay_id() const {
  return replay_id_;
}
inline void ReplayStopEventData::set_replay_id(::google::protobuf::uint64 value) {
  _set_bit(2);
  replay_id_ = value;
}

// optional uint64 log_id = 4;
inline bool ReplayStopEventData::has_log_id() const {
  return _has_bit(3);
}
inline void ReplayStopEventData::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 ReplayStopEventData::log_id() const {
  return log_id_;
}
inline void ReplayStopEventData::set_log_id(::google::protobuf::uint64 value) {
  _set_bit(3);
  log_id_ = value;
}

// -------------------------------------------------------------------

// LogEventData

// optional int32 event_type = 97;
inline bool LogEventData::has_event_type() const {
  return _has_bit(0);
}
inline void LogEventData::clear_event_type() {
  event_type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 LogEventData::event_type() const {
  return event_type_;
}
inline void LogEventData::set_event_type(::google::protobuf::int32 value) {
  _set_bit(0);
  event_type_ = value;
}

// optional .ContainerOpenedEventData container_opened_event = 1;
inline bool LogEventData::has_container_opened_event() const {
  return _has_bit(1);
}
inline void LogEventData::clear_container_opened_event() {
  if (container_opened_event_ != NULL) container_opened_event_->::ContainerOpenedEventData::Clear();
  _clear_bit(1);
}
inline const ::ContainerOpenedEventData& LogEventData::container_opened_event() const {
  return container_opened_event_ != NULL ? *container_opened_event_ : *default_instance_->container_opened_event_;
}
inline ::ContainerOpenedEventData* LogEventData::mutable_container_opened_event() {
  _set_bit(1);
  if (container_opened_event_ == NULL) container_opened_event_ = new ::ContainerOpenedEventData;
  return container_opened_event_;
}

// optional .ContainerCommittedEventData container_committed_event = 2;
inline bool LogEventData::has_container_committed_event() const {
  return _has_bit(2);
}
inline void LogEventData::clear_container_committed_event() {
  if (container_committed_event_ != NULL) container_committed_event_->::ContainerCommittedEventData::Clear();
  _clear_bit(2);
}
inline const ::ContainerCommittedEventData& LogEventData::container_committed_event() const {
  return container_committed_event_ != NULL ? *container_committed_event_ : *default_instance_->container_committed_event_;
}
inline ::ContainerCommittedEventData* LogEventData::mutable_container_committed_event() {
  _set_bit(2);
  if (container_committed_event_ == NULL) container_committed_event_ = new ::ContainerCommittedEventData;
  return container_committed_event_;
}

// optional .ContainerMergedEventData container_merged_event = 3;
inline bool LogEventData::has_container_merged_event() const {
  return _has_bit(3);
}
inline void LogEventData::clear_container_merged_event() {
  if (container_merged_event_ != NULL) container_merged_event_->::ContainerMergedEventData::Clear();
  _clear_bit(3);
}
inline const ::ContainerMergedEventData& LogEventData::container_merged_event() const {
  return container_merged_event_ != NULL ? *container_merged_event_ : *default_instance_->container_merged_event_;
}
inline ::ContainerMergedEventData* LogEventData::mutable_container_merged_event() {
  _set_bit(3);
  if (container_merged_event_ == NULL) container_merged_event_ = new ::ContainerMergedEventData;
  return container_merged_event_;
}

// optional .ContainerDeletedEventData container_deleted_event = 4;
inline bool LogEventData::has_container_deleted_event() const {
  return _has_bit(4);
}
inline void LogEventData::clear_container_deleted_event() {
  if (container_deleted_event_ != NULL) container_deleted_event_->::ContainerDeletedEventData::Clear();
  _clear_bit(4);
}
inline const ::ContainerDeletedEventData& LogEventData::container_deleted_event() const {
  return container_deleted_event_ != NULL ? *container_deleted_event_ : *default_instance_->container_deleted_event_;
}
inline ::ContainerDeletedEventData* LogEventData::mutable_container_deleted_event() {
  _set_bit(4);
  if (container_deleted_event_ == NULL) container_deleted_event_ = new ::ContainerDeletedEventData;
  return container_deleted_event_;
}

// optional .ContainerMoveEventData container_moved_event = 5;
inline bool LogEventData::has_container_moved_event() const {
  return _has_bit(5);
}
inline void LogEventData::clear_container_moved_event() {
  if (container_moved_event_ != NULL) container_moved_event_->::ContainerMoveEventData::Clear();
  _clear_bit(5);
}
inline const ::ContainerMoveEventData& LogEventData::container_moved_event() const {
  return container_moved_event_ != NULL ? *container_moved_event_ : *default_instance_->container_moved_event_;
}
inline ::ContainerMoveEventData* LogEventData::mutable_container_moved_event() {
  _set_bit(5);
  if (container_moved_event_ == NULL) container_moved_event_ = new ::ContainerMoveEventData;
  return container_moved_event_;
}

// optional .ContainerCommitFailedEventData container_commit_failed_event = 6;
inline bool LogEventData::has_container_commit_failed_event() const {
  return _has_bit(6);
}
inline void LogEventData::clear_container_commit_failed_event() {
  if (container_commit_failed_event_ != NULL) container_commit_failed_event_->::ContainerCommitFailedEventData::Clear();
  _clear_bit(6);
}
inline const ::ContainerCommitFailedEventData& LogEventData::container_commit_failed_event() const {
  return container_commit_failed_event_ != NULL ? *container_commit_failed_event_ : *default_instance_->container_commit_failed_event_;
}
inline ::ContainerCommitFailedEventData* LogEventData::mutable_container_commit_failed_event() {
  _set_bit(6);
  if (container_commit_failed_event_ == NULL) container_commit_failed_event_ = new ::ContainerCommitFailedEventData;
  return container_commit_failed_event_;
}

// optional .VolumeAttachedEventData volume_attached_event = 7;
inline bool LogEventData::has_volume_attached_event() const {
  return _has_bit(7);
}
inline void LogEventData::clear_volume_attached_event() {
  if (volume_attached_event_ != NULL) volume_attached_event_->::VolumeAttachedEventData::Clear();
  _clear_bit(7);
}
inline const ::VolumeAttachedEventData& LogEventData::volume_attached_event() const {
  return volume_attached_event_ != NULL ? *volume_attached_event_ : *default_instance_->volume_attached_event_;
}
inline ::VolumeAttachedEventData* LogEventData::mutable_volume_attached_event() {
  _set_bit(7);
  if (volume_attached_event_ == NULL) volume_attached_event_ = new ::VolumeAttachedEventData;
  return volume_attached_event_;
}

// optional .VolumeDetachedEventData volume_detached_event = 8;
inline bool LogEventData::has_volume_detached_event() const {
  return _has_bit(8);
}
inline void LogEventData::clear_volume_detached_event() {
  if (volume_detached_event_ != NULL) volume_detached_event_->::VolumeDetachedEventData::Clear();
  _clear_bit(8);
}
inline const ::VolumeDetachedEventData& LogEventData::volume_detached_event() const {
  return volume_detached_event_ != NULL ? *volume_detached_event_ : *default_instance_->volume_detached_event_;
}
inline ::VolumeDetachedEventData* LogEventData::mutable_volume_detached_event() {
  _set_bit(8);
  if (volume_detached_event_ == NULL) volume_detached_event_ = new ::VolumeDetachedEventData;
  return volume_detached_event_;
}

// optional .BlockMappingWrittenEventData block_mapping_written_event = 9;
inline bool LogEventData::has_block_mapping_written_event() const {
  return _has_bit(9);
}
inline void LogEventData::clear_block_mapping_written_event() {
  if (block_mapping_written_event_ != NULL) block_mapping_written_event_->::BlockMappingWrittenEventData::Clear();
  _clear_bit(9);
}
inline const ::BlockMappingWrittenEventData& LogEventData::block_mapping_written_event() const {
  return block_mapping_written_event_ != NULL ? *block_mapping_written_event_ : *default_instance_->block_mapping_written_event_;
}
inline ::BlockMappingWrittenEventData* LogEventData::mutable_block_mapping_written_event() {
  _set_bit(9);
  if (block_mapping_written_event_ == NULL) block_mapping_written_event_ = new ::BlockMappingWrittenEventData;
  return block_mapping_written_event_;
}

// optional .BlockMappingWriteFailedEventData block_mapping_write_failed_event = 10;
inline bool LogEventData::has_block_mapping_write_failed_event() const {
  return _has_bit(10);
}
inline void LogEventData::clear_block_mapping_write_failed_event() {
  if (block_mapping_write_failed_event_ != NULL) block_mapping_write_failed_event_->::BlockMappingWriteFailedEventData::Clear();
  _clear_bit(10);
}
inline const ::BlockMappingWriteFailedEventData& LogEventData::block_mapping_write_failed_event() const {
  return block_mapping_write_failed_event_ != NULL ? *block_mapping_write_failed_event_ : *default_instance_->block_mapping_write_failed_event_;
}
inline ::BlockMappingWriteFailedEventData* LogEventData::mutable_block_mapping_write_failed_event() {
  _set_bit(10);
  if (block_mapping_write_failed_event_ == NULL) block_mapping_write_failed_event_ = new ::BlockMappingWriteFailedEventData;
  return block_mapping_write_failed_event_;
}

// optional .BlockMappingDeletedEventData block_mapping_deleted_event = 11;
inline bool LogEventData::has_block_mapping_deleted_event() const {
  return _has_bit(11);
}
inline void LogEventData::clear_block_mapping_deleted_event() {
  if (block_mapping_deleted_event_ != NULL) block_mapping_deleted_event_->::BlockMappingDeletedEventData::Clear();
  _clear_bit(11);
}
inline const ::BlockMappingDeletedEventData& LogEventData::block_mapping_deleted_event() const {
  return block_mapping_deleted_event_ != NULL ? *block_mapping_deleted_event_ : *default_instance_->block_mapping_deleted_event_;
}
inline ::BlockMappingDeletedEventData* LogEventData::mutable_block_mapping_deleted_event() {
  _set_bit(11);
  if (block_mapping_deleted_event_ == NULL) block_mapping_deleted_event_ = new ::BlockMappingDeletedEventData;
  return block_mapping_deleted_event_;
}

// optional .OphranChunksEventData ophran_chunks_event = 12;
inline bool LogEventData::has_ophran_chunks_event() const {
  return _has_bit(12);
}
inline void LogEventData::clear_ophran_chunks_event() {
  if (ophran_chunks_event_ != NULL) ophran_chunks_event_->::OphranChunksEventData::Clear();
  _clear_bit(12);
}
inline const ::OphranChunksEventData& LogEventData::ophran_chunks_event() const {
  return ophran_chunks_event_ != NULL ? *ophran_chunks_event_ : *default_instance_->ophran_chunks_event_;
}
inline ::OphranChunksEventData* LogEventData::mutable_ophran_chunks_event() {
  _set_bit(12);
  if (ophran_chunks_event_ == NULL) ophran_chunks_event_ = new ::OphranChunksEventData;
  return ophran_chunks_event_;
}

// optional .ReplayStartEventData replay_start_event = 13;
inline bool LogEventData::has_replay_start_event() const {
  return _has_bit(13);
}
inline void LogEventData::clear_replay_start_event() {
  if (replay_start_event_ != NULL) replay_start_event_->::ReplayStartEventData::Clear();
  _clear_bit(13);
}
inline const ::ReplayStartEventData& LogEventData::replay_start_event() const {
  return replay_start_event_ != NULL ? *replay_start_event_ : *default_instance_->replay_start_event_;
}
inline ::ReplayStartEventData* LogEventData::mutable_replay_start_event() {
  _set_bit(13);
  if (replay_start_event_ == NULL) replay_start_event_ = new ::ReplayStartEventData;
  return replay_start_event_;
}

// optional .ReplayStopEventData replay_stop_event = 14;
inline bool LogEventData::has_replay_stop_event() const {
  return _has_bit(14);
}
inline void LogEventData::clear_replay_stop_event() {
  if (replay_stop_event_ != NULL) replay_stop_event_->::ReplayStopEventData::Clear();
  _clear_bit(14);
}
inline const ::ReplayStopEventData& LogEventData::replay_stop_event() const {
  return replay_stop_event_ != NULL ? *replay_stop_event_ : *default_instance_->replay_stop_event_;
}
inline ::ReplayStopEventData* LogEventData::mutable_replay_stop_event() {
  _set_bit(14);
  if (replay_stop_event_ == NULL) replay_stop_event_ = new ::ReplayStopEventData;
  return replay_stop_event_;
}

// optional .SystemStartEventData system_start_event = 15;
inline bool LogEventData::has_system_start_event() const {
  return _has_bit(15);
}
inline void LogEventData::clear_system_start_event() {
  if (system_start_event_ != NULL) system_start_event_->::SystemStartEventData::Clear();
  _clear_bit(15);
}
inline const ::SystemStartEventData& LogEventData::system_start_event() const {
  return system_start_event_ != NULL ? *system_start_event_ : *default_instance_->system_start_event_;
}
inline ::SystemStartEventData* LogEventData::mutable_system_start_event() {
  _set_bit(15);
  if (system_start_event_ == NULL) system_start_event_ = new ::SystemStartEventData;
  return system_start_event_;
}

// optional .MessageData message_data = 98;
inline bool LogEventData::has_message_data() const {
  return _has_bit(16);
}
inline void LogEventData::clear_message_data() {
  if (message_data_ != NULL) message_data_->::MessageData::Clear();
  _clear_bit(16);
}
inline const ::MessageData& LogEventData::message_data() const {
  return message_data_ != NULL ? *message_data_ : *default_instance_->message_data_;
}
inline ::MessageData* LogEventData::mutable_message_data() {
  _set_bit(16);
  if (message_data_ == NULL) message_data_ = new ::MessageData;
  return message_data_;
}

// -------------------------------------------------------------------

// LogEntryData

// optional int64 log_id = 7;
inline bool LogEntryData::has_log_id() const {
  return _has_bit(0);
}
inline void LogEntryData::clear_log_id() {
  log_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 LogEntryData::log_id() const {
  return log_id_;
}
inline void LogEntryData::set_log_id(::google::protobuf::int64 value) {
  _set_bit(0);
  log_id_ = value;
}

// optional bytes value = 3;
inline bool LogEntryData::has_value() const {
  return _has_bit(1);
}
inline void LogEntryData::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& LogEntryData::value() const {
  return *value_;
}
inline void LogEntryData::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void LogEntryData::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void LogEntryData::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogEntryData::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// optional uint32 partial_index = 5;
inline bool LogEntryData::has_partial_index() const {
  return _has_bit(2);
}
inline void LogEntryData::clear_partial_index() {
  partial_index_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 LogEntryData::partial_index() const {
  return partial_index_;
}
inline void LogEntryData::set_partial_index(::google::protobuf::uint32 value) {
  _set_bit(2);
  partial_index_ = value;
}

// optional uint32 partial_count = 6;
inline bool LogEntryData::has_partial_count() const {
  return _has_bit(3);
}
inline void LogEntryData::clear_partial_count() {
  partial_count_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 LogEntryData::partial_count() const {
  return partial_count_;
}
inline void LogEntryData::set_partial_count(::google::protobuf::uint32 value) {
  _set_bit(3);
  partial_count_ = value;
}

// optional int64 last_fully_written_log_id = 8;
inline bool LogEntryData::has_last_fully_written_log_id() const {
  return _has_bit(4);
}
inline void LogEntryData::clear_last_fully_written_log_id() {
  last_fully_written_log_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 LogEntryData::last_fully_written_log_id() const {
  return last_fully_written_log_id_;
}
inline void LogEntryData::set_last_fully_written_log_id(::google::protobuf::int64 value) {
  _set_bit(4);
  last_fully_written_log_id_ = value;
}

// -------------------------------------------------------------------

// ContainerOpenedEventData

// required uint64 container_id = 1;
inline bool ContainerOpenedEventData::has_container_id() const {
  return _has_bit(0);
}
inline void ContainerOpenedEventData::clear_container_id() {
  container_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerOpenedEventData::container_id() const {
  return container_id_;
}
inline void ContainerOpenedEventData::set_container_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  container_id_ = value;
}

// optional .ContainerStorageAddressData address = 2;
inline bool ContainerOpenedEventData::has_address() const {
  return _has_bit(1);
}
inline void ContainerOpenedEventData::clear_address() {
  if (address_ != NULL) address_->::ContainerStorageAddressData::Clear();
  _clear_bit(1);
}
inline const ::ContainerStorageAddressData& ContainerOpenedEventData::address() const {
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::ContainerStorageAddressData* ContainerOpenedEventData::mutable_address() {
  _set_bit(1);
  if (address_ == NULL) address_ = new ::ContainerStorageAddressData;
  return address_;
}

// -------------------------------------------------------------------

// ContainerCommittedEventData

// required uint64 container_id = 1;
inline bool ContainerCommittedEventData::has_container_id() const {
  return _has_bit(0);
}
inline void ContainerCommittedEventData::clear_container_id() {
  container_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerCommittedEventData::container_id() const {
  return container_id_;
}
inline void ContainerCommittedEventData::set_container_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  container_id_ = value;
}

// optional .ContainerStorageAddressData address = 4;
inline bool ContainerCommittedEventData::has_address() const {
  return _has_bit(1);
}
inline void ContainerCommittedEventData::clear_address() {
  if (address_ != NULL) address_->::ContainerStorageAddressData::Clear();
  _clear_bit(1);
}
inline const ::ContainerStorageAddressData& ContainerCommittedEventData::address() const {
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::ContainerStorageAddressData* ContainerCommittedEventData::mutable_address() {
  _set_bit(1);
  if (address_ == NULL) address_ = new ::ContainerStorageAddressData;
  return address_;
}

// optional uint32 item_count = 5;
inline bool ContainerCommittedEventData::has_item_count() const {
  return _has_bit(2);
}
inline void ContainerCommittedEventData::clear_item_count() {
  item_count_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ContainerCommittedEventData::item_count() const {
  return item_count_;
}
inline void ContainerCommittedEventData::set_item_count(::google::protobuf::uint32 value) {
  _set_bit(2);
  item_count_ = value;
}

// optional uint32 active_data_size = 6;
inline bool ContainerCommittedEventData::has_active_data_size() const {
  return _has_bit(3);
}
inline void ContainerCommittedEventData::clear_active_data_size() {
  active_data_size_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 ContainerCommittedEventData::active_data_size() const {
  return active_data_size_;
}
inline void ContainerCommittedEventData::set_active_data_size(::google::protobuf::uint32 value) {
  _set_bit(3);
  active_data_size_ = value;
}

// -------------------------------------------------------------------

// ContainerMergedEventData

// required uint64 first_id = 1;
inline bool ContainerMergedEventData::has_first_id() const {
  return _has_bit(0);
}
inline void ContainerMergedEventData::clear_first_id() {
  first_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerMergedEventData::first_id() const {
  return first_id_;
}
inline void ContainerMergedEventData::set_first_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  first_id_ = value;
}

// required uint64 second_id = 2;
inline bool ContainerMergedEventData::has_second_id() const {
  return _has_bit(1);
}
inline void ContainerMergedEventData::clear_second_id() {
  second_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 ContainerMergedEventData::second_id() const {
  return second_id_;
}
inline void ContainerMergedEventData::set_second_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  second_id_ = value;
}

// repeated uint64 first_secondary_id = 3 [packed = true];
inline int ContainerMergedEventData::first_secondary_id_size() const {
  return first_secondary_id_.size();
}
inline void ContainerMergedEventData::clear_first_secondary_id() {
  first_secondary_id_.Clear();
}
inline ::google::protobuf::uint64 ContainerMergedEventData::first_secondary_id(int index) const {
  return first_secondary_id_.Get(index);
}
inline void ContainerMergedEventData::set_first_secondary_id(int index, ::google::protobuf::uint64 value) {
  first_secondary_id_.Set(index, value);
}
inline void ContainerMergedEventData::add_first_secondary_id(::google::protobuf::uint64 value) {
  first_secondary_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ContainerMergedEventData::first_secondary_id() const {
  return first_secondary_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ContainerMergedEventData::mutable_first_secondary_id() {
  return &first_secondary_id_;
}

// repeated uint64 second_secondary_id = 4 [packed = true];
inline int ContainerMergedEventData::second_secondary_id_size() const {
  return second_secondary_id_.size();
}
inline void ContainerMergedEventData::clear_second_secondary_id() {
  second_secondary_id_.Clear();
}
inline ::google::protobuf::uint64 ContainerMergedEventData::second_secondary_id(int index) const {
  return second_secondary_id_.Get(index);
}
inline void ContainerMergedEventData::set_second_secondary_id(int index, ::google::protobuf::uint64 value) {
  second_secondary_id_.Set(index, value);
}
inline void ContainerMergedEventData::add_second_secondary_id(::google::protobuf::uint64 value) {
  second_secondary_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ContainerMergedEventData::second_secondary_id() const {
  return second_secondary_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ContainerMergedEventData::mutable_second_secondary_id() {
  return &second_secondary_id_;
}

// optional .ContainerStorageAddressData first_address = 13;
inline bool ContainerMergedEventData::has_first_address() const {
  return _has_bit(4);
}
inline void ContainerMergedEventData::clear_first_address() {
  if (first_address_ != NULL) first_address_->::ContainerStorageAddressData::Clear();
  _clear_bit(4);
}
inline const ::ContainerStorageAddressData& ContainerMergedEventData::first_address() const {
  return first_address_ != NULL ? *first_address_ : *default_instance_->first_address_;
}
inline ::ContainerStorageAddressData* ContainerMergedEventData::mutable_first_address() {
  _set_bit(4);
  if (first_address_ == NULL) first_address_ = new ::ContainerStorageAddressData;
  return first_address_;
}

// optional .ContainerStorageAddressData second_address = 14;
inline bool ContainerMergedEventData::has_second_address() const {
  return _has_bit(5);
}
inline void ContainerMergedEventData::clear_second_address() {
  if (second_address_ != NULL) second_address_->::ContainerStorageAddressData::Clear();
  _clear_bit(5);
}
inline const ::ContainerStorageAddressData& ContainerMergedEventData::second_address() const {
  return second_address_ != NULL ? *second_address_ : *default_instance_->second_address_;
}
inline ::ContainerStorageAddressData* ContainerMergedEventData::mutable_second_address() {
  _set_bit(5);
  if (second_address_ == NULL) second_address_ = new ::ContainerStorageAddressData;
  return second_address_;
}

// optional .ContainerStorageAddressData new_address = 15;
inline bool ContainerMergedEventData::has_new_address() const {
  return _has_bit(6);
}
inline void ContainerMergedEventData::clear_new_address() {
  if (new_address_ != NULL) new_address_->::ContainerStorageAddressData::Clear();
  _clear_bit(6);
}
inline const ::ContainerStorageAddressData& ContainerMergedEventData::new_address() const {
  return new_address_ != NULL ? *new_address_ : *default_instance_->new_address_;
}
inline ::ContainerStorageAddressData* ContainerMergedEventData::mutable_new_address() {
  _set_bit(6);
  if (new_address_ == NULL) new_address_ = new ::ContainerStorageAddressData;
  return new_address_;
}

// optional uint64 new_primary_id = 18;
inline bool ContainerMergedEventData::has_new_primary_id() const {
  return _has_bit(7);
}
inline void ContainerMergedEventData::clear_new_primary_id() {
  new_primary_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(7);
}
inline ::google::protobuf::uint64 ContainerMergedEventData::new_primary_id() const {
  return new_primary_id_;
}
inline void ContainerMergedEventData::set_new_primary_id(::google::protobuf::uint64 value) {
  _set_bit(7);
  new_primary_id_ = value;
}

// repeated uint64 new_secondary_id = 11 [packed = true];
inline int ContainerMergedEventData::new_secondary_id_size() const {
  return new_secondary_id_.size();
}
inline void ContainerMergedEventData::clear_new_secondary_id() {
  new_secondary_id_.Clear();
}
inline ::google::protobuf::uint64 ContainerMergedEventData::new_secondary_id(int index) const {
  return new_secondary_id_.Get(index);
}
inline void ContainerMergedEventData::set_new_secondary_id(int index, ::google::protobuf::uint64 value) {
  new_secondary_id_.Set(index, value);
}
inline void ContainerMergedEventData::add_new_secondary_id(::google::protobuf::uint64 value) {
  new_secondary_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ContainerMergedEventData::new_secondary_id() const {
  return new_secondary_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ContainerMergedEventData::mutable_new_secondary_id() {
  return &new_secondary_id_;
}

// repeated uint64 unused_ids = 12 [packed = true];
inline int ContainerMergedEventData::unused_ids_size() const {
  return unused_ids_.size();
}
inline void ContainerMergedEventData::clear_unused_ids() {
  unused_ids_.Clear();
}
inline ::google::protobuf::uint64 ContainerMergedEventData::unused_ids(int index) const {
  return unused_ids_.Get(index);
}
inline void ContainerMergedEventData::set_unused_ids(int index, ::google::protobuf::uint64 value) {
  unused_ids_.Set(index, value);
}
inline void ContainerMergedEventData::add_unused_ids(::google::protobuf::uint64 value) {
  unused_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ContainerMergedEventData::unused_ids() const {
  return unused_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ContainerMergedEventData::mutable_unused_ids() {
  return &unused_ids_;
}

// optional uint32 new_item_count = 16;
inline bool ContainerMergedEventData::has_new_item_count() const {
  return _has_bit(10);
}
inline void ContainerMergedEventData::clear_new_item_count() {
  new_item_count_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 ContainerMergedEventData::new_item_count() const {
  return new_item_count_;
}
inline void ContainerMergedEventData::set_new_item_count(::google::protobuf::uint32 value) {
  _set_bit(10);
  new_item_count_ = value;
}

// optional uint32 new_active_data_size = 17;
inline bool ContainerMergedEventData::has_new_active_data_size() const {
  return _has_bit(11);
}
inline void ContainerMergedEventData::clear_new_active_data_size() {
  new_active_data_size_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 ContainerMergedEventData::new_active_data_size() const {
  return new_active_data_size_;
}
inline void ContainerMergedEventData::set_new_active_data_size(::google::protobuf::uint32 value) {
  _set_bit(11);
  new_active_data_size_ = value;
}

// -------------------------------------------------------------------

// ContainerDeletedEventData

// required uint64 container_id = 1;
inline bool ContainerDeletedEventData::has_container_id() const {
  return _has_bit(0);
}
inline void ContainerDeletedEventData::clear_container_id() {
  container_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerDeletedEventData::container_id() const {
  return container_id_;
}
inline void ContainerDeletedEventData::set_container_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  container_id_ = value;
}

// repeated uint64 secondary_container_id = 2 [packed = true];
inline int ContainerDeletedEventData::secondary_container_id_size() const {
  return secondary_container_id_.size();
}
inline void ContainerDeletedEventData::clear_secondary_container_id() {
  secondary_container_id_.Clear();
}
inline ::google::protobuf::uint64 ContainerDeletedEventData::secondary_container_id(int index) const {
  return secondary_container_id_.Get(index);
}
inline void ContainerDeletedEventData::set_secondary_container_id(int index, ::google::protobuf::uint64 value) {
  secondary_container_id_.Set(index, value);
}
inline void ContainerDeletedEventData::add_secondary_container_id(::google::protobuf::uint64 value) {
  secondary_container_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ContainerDeletedEventData::secondary_container_id() const {
  return secondary_container_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ContainerDeletedEventData::mutable_secondary_container_id() {
  return &secondary_container_id_;
}

// optional .ContainerStorageAddressData address = 5;
inline bool ContainerDeletedEventData::has_address() const {
  return _has_bit(2);
}
inline void ContainerDeletedEventData::clear_address() {
  if (address_ != NULL) address_->::ContainerStorageAddressData::Clear();
  _clear_bit(2);
}
inline const ::ContainerStorageAddressData& ContainerDeletedEventData::address() const {
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::ContainerStorageAddressData* ContainerDeletedEventData::mutable_address() {
  _set_bit(2);
  if (address_ == NULL) address_ = new ::ContainerStorageAddressData;
  return address_;
}

// optional uint64 file_offset = 4;
inline bool ContainerDeletedEventData::has_file_offset() const {
  return _has_bit(3);
}
inline void ContainerDeletedEventData::clear_file_offset() {
  file_offset_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 ContainerDeletedEventData::file_offset() const {
  return file_offset_;
}
inline void ContainerDeletedEventData::set_file_offset(::google::protobuf::uint64 value) {
  _set_bit(3);
  file_offset_ = value;
}

// -------------------------------------------------------------------

// ContainerMoveEventData

// required uint64 container_id = 1;
inline bool ContainerMoveEventData::has_container_id() const {
  return _has_bit(0);
}
inline void ContainerMoveEventData::clear_container_id() {
  container_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerMoveEventData::container_id() const {
  return container_id_;
}
inline void ContainerMoveEventData::set_container_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  container_id_ = value;
}

// optional .ContainerStorageAddressData old_address = 6;
inline bool ContainerMoveEventData::has_old_address() const {
  return _has_bit(1);
}
inline void ContainerMoveEventData::clear_old_address() {
  if (old_address_ != NULL) old_address_->::ContainerStorageAddressData::Clear();
  _clear_bit(1);
}
inline const ::ContainerStorageAddressData& ContainerMoveEventData::old_address() const {
  return old_address_ != NULL ? *old_address_ : *default_instance_->old_address_;
}
inline ::ContainerStorageAddressData* ContainerMoveEventData::mutable_old_address() {
  _set_bit(1);
  if (old_address_ == NULL) old_address_ = new ::ContainerStorageAddressData;
  return old_address_;
}

// optional .ContainerStorageAddressData new_address = 7;
inline bool ContainerMoveEventData::has_new_address() const {
  return _has_bit(2);
}
inline void ContainerMoveEventData::clear_new_address() {
  if (new_address_ != NULL) new_address_->::ContainerStorageAddressData::Clear();
  _clear_bit(2);
}
inline const ::ContainerStorageAddressData& ContainerMoveEventData::new_address() const {
  return new_address_ != NULL ? *new_address_ : *default_instance_->new_address_;
}
inline ::ContainerStorageAddressData* ContainerMoveEventData::mutable_new_address() {
  _set_bit(2);
  if (new_address_ == NULL) new_address_ = new ::ContainerStorageAddressData;
  return new_address_;
}

// optional uint64 active_data_size = 8;
inline bool ContainerMoveEventData::has_active_data_size() const {
  return _has_bit(3);
}
inline void ContainerMoveEventData::clear_active_data_size() {
  active_data_size_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 ContainerMoveEventData::active_data_size() const {
  return active_data_size_;
}
inline void ContainerMoveEventData::set_active_data_size(::google::protobuf::uint64 value) {
  _set_bit(3);
  active_data_size_ = value;
}

// optional uint64 old_active_data_size = 9;
inline bool ContainerMoveEventData::has_old_active_data_size() const {
  return _has_bit(4);
}
inline void ContainerMoveEventData::clear_old_active_data_size() {
  old_active_data_size_ = GOOGLE_ULONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::uint64 ContainerMoveEventData::old_active_data_size() const {
  return old_active_data_size_;
}
inline void ContainerMoveEventData::set_old_active_data_size(::google::protobuf::uint64 value) {
  _set_bit(4);
  old_active_data_size_ = value;
}

// optional uint32 item_count = 10;
inline bool ContainerMoveEventData::has_item_count() const {
  return _has_bit(5);
}
inline void ContainerMoveEventData::clear_item_count() {
  item_count_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 ContainerMoveEventData::item_count() const {
  return item_count_;
}
inline void ContainerMoveEventData::set_item_count(::google::protobuf::uint32 value) {
  _set_bit(5);
  item_count_ = value;
}

// optional uint32 old_item_count = 11;
inline bool ContainerMoveEventData::has_old_item_count() const {
  return _has_bit(6);
}
inline void ContainerMoveEventData::clear_old_item_count() {
  old_item_count_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 ContainerMoveEventData::old_item_count() const {
  return old_item_count_;
}
inline void ContainerMoveEventData::set_old_item_count(::google::protobuf::uint32 value) {
  _set_bit(6);
  old_item_count_ = value;
}

// -------------------------------------------------------------------

// ContainerCommitFailedEventData

// required uint64 container_id = 1;
inline bool ContainerCommitFailedEventData::has_container_id() const {
  return _has_bit(0);
}
inline void ContainerCommitFailedEventData::clear_container_id() {
  container_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerCommitFailedEventData::container_id() const {
  return container_id_;
}
inline void ContainerCommitFailedEventData::set_container_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  container_id_ = value;
}

// repeated bytes item_key = 2;
inline int ContainerCommitFailedEventData::item_key_size() const {
  return item_key_.size();
}
inline void ContainerCommitFailedEventData::clear_item_key() {
  item_key_.Clear();
}
inline const ::std::string& ContainerCommitFailedEventData::item_key(int index) const {
  return item_key_.Get(index);
}
inline ::std::string* ContainerCommitFailedEventData::mutable_item_key(int index) {
  return item_key_.Mutable(index);
}
inline void ContainerCommitFailedEventData::set_item_key(int index, const ::std::string& value) {
  item_key_.Mutable(index)->assign(value);
}
inline void ContainerCommitFailedEventData::set_item_key(int index, const char* value) {
  item_key_.Mutable(index)->assign(value);
}
inline void ContainerCommitFailedEventData::set_item_key(int index, const void* value, size_t size) {
  item_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainerCommitFailedEventData::add_item_key() {
  return item_key_.Add();
}
inline void ContainerCommitFailedEventData::add_item_key(const ::std::string& value) {
  item_key_.Add()->assign(value);
}
inline void ContainerCommitFailedEventData::add_item_key(const char* value) {
  item_key_.Add()->assign(value);
}
inline void ContainerCommitFailedEventData::add_item_key(const void* value, size_t size) {
  item_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContainerCommitFailedEventData::item_key() const {
  return item_key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ContainerCommitFailedEventData::mutable_item_key() {
  return &item_key_;
}

// -------------------------------------------------------------------

// VolumeAttachedEventData

// required uint32 volume_id = 1;
inline bool VolumeAttachedEventData::has_volume_id() const {
  return _has_bit(0);
}
inline void VolumeAttachedEventData::clear_volume_id() {
  volume_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 VolumeAttachedEventData::volume_id() const {
  return volume_id_;
}
inline void VolumeAttachedEventData::set_volume_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  volume_id_ = value;
}

// -------------------------------------------------------------------

// VolumeDetachedEventData

// required uint32 volume_id = 1;
inline bool VolumeDetachedEventData::has_volume_id() const {
  return _has_bit(0);
}
inline void VolumeDetachedEventData::clear_volume_id() {
  volume_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 VolumeDetachedEventData::volume_id() const {
  return volume_id_;
}
inline void VolumeDetachedEventData::set_volume_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  volume_id_ = value;
}

// -------------------------------------------------------------------

// BlockMappingWrittenEventData

// optional .BlockMappingPairData mapping_pair = 4;
inline bool BlockMappingWrittenEventData::has_mapping_pair() const {
  return _has_bit(0);
}
inline void BlockMappingWrittenEventData::clear_mapping_pair() {
  if (mapping_pair_ != NULL) mapping_pair_->::BlockMappingPairData::Clear();
  _clear_bit(0);
}
inline const ::BlockMappingPairData& BlockMappingWrittenEventData::mapping_pair() const {
  return mapping_pair_ != NULL ? *mapping_pair_ : *default_instance_->mapping_pair_;
}
inline ::BlockMappingPairData* BlockMappingWrittenEventData::mutable_mapping_pair() {
  _set_bit(0);
  if (mapping_pair_ == NULL) mapping_pair_ = new ::BlockMappingPairData;
  return mapping_pair_;
}

// -------------------------------------------------------------------

// BlockMappingWriteFailedEventData

// optional .BlockMappingPairData mapping_pair = 4;
inline bool BlockMappingWriteFailedEventData::has_mapping_pair() const {
  return _has_bit(0);
}
inline void BlockMappingWriteFailedEventData::clear_mapping_pair() {
  if (mapping_pair_ != NULL) mapping_pair_->::BlockMappingPairData::Clear();
  _clear_bit(0);
}
inline const ::BlockMappingPairData& BlockMappingWriteFailedEventData::mapping_pair() const {
  return mapping_pair_ != NULL ? *mapping_pair_ : *default_instance_->mapping_pair_;
}
inline ::BlockMappingPairData* BlockMappingWriteFailedEventData::mutable_mapping_pair() {
  _set_bit(0);
  if (mapping_pair_ == NULL) mapping_pair_ = new ::BlockMappingPairData;
  return mapping_pair_;
}

// optional int64 write_event_log_id = 3;
inline bool BlockMappingWriteFailedEventData::has_write_event_log_id() const {
  return _has_bit(1);
}
inline void BlockMappingWriteFailedEventData::clear_write_event_log_id() {
  write_event_log_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 BlockMappingWriteFailedEventData::write_event_log_id() const {
  return write_event_log_id_;
}
inline void BlockMappingWriteFailedEventData::set_write_event_log_id(::google::protobuf::int64 value) {
  _set_bit(1);
  write_event_log_id_ = value;
}

// -------------------------------------------------------------------

// BlockMappingDeletedEventData

// optional .BlockMappingData original_block_mapping = 1;
inline bool BlockMappingDeletedEventData::has_original_block_mapping() const {
  return _has_bit(0);
}
inline void BlockMappingDeletedEventData::clear_original_block_mapping() {
  if (original_block_mapping_ != NULL) original_block_mapping_->::BlockMappingData::Clear();
  _clear_bit(0);
}
inline const ::BlockMappingData& BlockMappingDeletedEventData::original_block_mapping() const {
  return original_block_mapping_ != NULL ? *original_block_mapping_ : *default_instance_->original_block_mapping_;
}
inline ::BlockMappingData* BlockMappingDeletedEventData::mutable_original_block_mapping() {
  _set_bit(0);
  if (original_block_mapping_ == NULL) original_block_mapping_ = new ::BlockMappingData;
  return original_block_mapping_;
}

// -------------------------------------------------------------------

// OphranChunksEventData

// repeated bytes chunk_fp = 1;
inline int OphranChunksEventData::chunk_fp_size() const {
  return chunk_fp_.size();
}
inline void OphranChunksEventData::clear_chunk_fp() {
  chunk_fp_.Clear();
}
inline const ::std::string& OphranChunksEventData::chunk_fp(int index) const {
  return chunk_fp_.Get(index);
}
inline ::std::string* OphranChunksEventData::mutable_chunk_fp(int index) {
  return chunk_fp_.Mutable(index);
}
inline void OphranChunksEventData::set_chunk_fp(int index, const ::std::string& value) {
  chunk_fp_.Mutable(index)->assign(value);
}
inline void OphranChunksEventData::set_chunk_fp(int index, const char* value) {
  chunk_fp_.Mutable(index)->assign(value);
}
inline void OphranChunksEventData::set_chunk_fp(int index, const void* value, size_t size) {
  chunk_fp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OphranChunksEventData::add_chunk_fp() {
  return chunk_fp_.Add();
}
inline void OphranChunksEventData::add_chunk_fp(const ::std::string& value) {
  chunk_fp_.Add()->assign(value);
}
inline void OphranChunksEventData::add_chunk_fp(const char* value) {
  chunk_fp_.Add()->assign(value);
}
inline void OphranChunksEventData::add_chunk_fp(const void* value, size_t size) {
  chunk_fp_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OphranChunksEventData::chunk_fp() const {
  return chunk_fp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OphranChunksEventData::mutable_chunk_fp() {
  return &chunk_fp_;
}

// -------------------------------------------------------------------

// BlockIndexLogfileData

// optional .ContainerTrackerData container_tracker = 2;
inline bool BlockIndexLogfileData::has_container_tracker() const {
  return _has_bit(0);
}
inline void BlockIndexLogfileData::clear_container_tracker() {
  if (container_tracker_ != NULL) container_tracker_->::ContainerTrackerData::Clear();
  _clear_bit(0);
}
inline const ::ContainerTrackerData& BlockIndexLogfileData::container_tracker() const {
  return container_tracker_ != NULL ? *container_tracker_ : *default_instance_->container_tracker_;
}
inline ::ContainerTrackerData* BlockIndexLogfileData::mutable_container_tracker() {
  _set_bit(0);
  if (container_tracker_ == NULL) container_tracker_ = new ::ContainerTrackerData;
  return container_tracker_;
}

// -------------------------------------------------------------------

// ChunkIndexLogfileData

// optional .ContainerTrackerData container_tracker = 2;
inline bool ChunkIndexLogfileData::has_container_tracker() const {
  return _has_bit(0);
}
inline void ChunkIndexLogfileData::clear_container_tracker() {
  if (container_tracker_ != NULL) container_tracker_->::ContainerTrackerData::Clear();
  _clear_bit(0);
}
inline const ::ContainerTrackerData& ChunkIndexLogfileData::container_tracker() const {
  return container_tracker_ != NULL ? *container_tracker_ : *default_instance_->container_tracker_;
}
inline ::ContainerTrackerData* ChunkIndexLogfileData::mutable_container_tracker() {
  _set_bit(0);
  if (container_tracker_ == NULL) container_tracker_ = new ::ContainerTrackerData;
  return container_tracker_;
}

// -------------------------------------------------------------------

// BloomFilterLogfileData

// optional uint64 filter_size = 1;
inline bool BloomFilterLogfileData::has_filter_size() const {
  return _has_bit(0);
}
inline void BloomFilterLogfileData::clear_filter_size() {
  filter_size_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 BloomFilterLogfileData::filter_size() const {
  return filter_size_;
}
inline void BloomFilterLogfileData::set_filter_size(::google::protobuf::uint64 value) {
  _set_bit(0);
  filter_size_ = value;
}

// optional uint32 k = 2;
inline bool BloomFilterLogfileData::has_k() const {
  return _has_bit(1);
}
inline void BloomFilterLogfileData::clear_k() {
  k_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 BloomFilterLogfileData::k() const {
  return k_;
}
inline void BloomFilterLogfileData::set_k(::google::protobuf::uint32 value) {
  _set_bit(1);
  k_ = value;
}

// optional .ContainerTrackerData container_tracker = 4;
inline bool BloomFilterLogfileData::has_container_tracker() const {
  return _has_bit(2);
}
inline void BloomFilterLogfileData::clear_container_tracker() {
  if (container_tracker_ != NULL) container_tracker_->::ContainerTrackerData::Clear();
  _clear_bit(2);
}
inline const ::ContainerTrackerData& BloomFilterLogfileData::container_tracker() const {
  return container_tracker_ != NULL ? *container_tracker_ : *default_instance_->container_tracker_;
}
inline ::ContainerTrackerData* BloomFilterLogfileData::mutable_container_tracker() {
  _set_bit(2);
  if (container_tracker_ == NULL) container_tracker_ = new ::ContainerTrackerData;
  return container_tracker_;
}

// -------------------------------------------------------------------

// GarbageCollectionCandidateData

// optional uint64 address = 1;
inline bool GarbageCollectionCandidateData::has_address() const {
  return _has_bit(0);
}
inline void GarbageCollectionCandidateData::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 GarbageCollectionCandidateData::address() const {
  return address_;
}
inline void GarbageCollectionCandidateData::set_address(::google::protobuf::uint64 value) {
  _set_bit(0);
  address_ = value;
}

// repeated .GarbageCollectionCandidateItemData item = 2;
inline int GarbageCollectionCandidateData::item_size() const {
  return item_.size();
}
inline void GarbageCollectionCandidateData::clear_item() {
  item_.Clear();
}
inline const ::GarbageCollectionCandidateItemData& GarbageCollectionCandidateData::item(int index) const {
  return item_.Get(index);
}
inline ::GarbageCollectionCandidateItemData* GarbageCollectionCandidateData::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::GarbageCollectionCandidateItemData* GarbageCollectionCandidateData::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GarbageCollectionCandidateItemData >&
GarbageCollectionCandidateData::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::GarbageCollectionCandidateItemData >*
GarbageCollectionCandidateData::mutable_item() {
  return &item_;
}

// optional bool processing = 3;
inline bool GarbageCollectionCandidateData::has_processing() const {
  return _has_bit(2);
}
inline void GarbageCollectionCandidateData::clear_processing() {
  processing_ = false;
  _clear_bit(2);
}
inline bool GarbageCollectionCandidateData::processing() const {
  return processing_;
}
inline void GarbageCollectionCandidateData::set_processing(bool value) {
  _set_bit(2);
  processing_ = value;
}

// optional uint32 unchanged_processing_count = 4;
inline bool GarbageCollectionCandidateData::has_unchanged_processing_count() const {
  return _has_bit(3);
}
inline void GarbageCollectionCandidateData::clear_unchanged_processing_count() {
  unchanged_processing_count_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 GarbageCollectionCandidateData::unchanged_processing_count() const {
  return unchanged_processing_count_;
}
inline void GarbageCollectionCandidateData::set_unchanged_processing_count(::google::protobuf::uint32 value) {
  _set_bit(3);
  unchanged_processing_count_ = value;
}

// -------------------------------------------------------------------

// GarbageCollectionCandidateItemData

// optional bytes fp = 1;
inline bool GarbageCollectionCandidateItemData::has_fp() const {
  return _has_bit(0);
}
inline void GarbageCollectionCandidateItemData::clear_fp() {
  if (fp_ != &_default_fp_) {
    fp_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GarbageCollectionCandidateItemData::fp() const {
  return *fp_;
}
inline void GarbageCollectionCandidateItemData::set_fp(const ::std::string& value) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(value);
}
inline void GarbageCollectionCandidateItemData::set_fp(const char* value) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(value);
}
inline void GarbageCollectionCandidateItemData::set_fp(const void* value, size_t size) {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  fp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GarbageCollectionCandidateItemData::mutable_fp() {
  _set_bit(0);
  if (fp_ == &_default_fp_) {
    fp_ = new ::std::string;
  }
  return fp_;
}

// optional .GarbageCollectionCandidateItemData.Type type = 2;
inline bool GarbageCollectionCandidateItemData::has_type() const {
  return _has_bit(1);
}
inline void GarbageCollectionCandidateItemData::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::GarbageCollectionCandidateItemData_Type GarbageCollectionCandidateItemData::type() const {
  return static_cast< ::GarbageCollectionCandidateItemData_Type >(type_);
}
inline void GarbageCollectionCandidateItemData::set_type(::GarbageCollectionCandidateItemData_Type value) {
  GOOGLE_DCHECK(::GarbageCollectionCandidateItemData_Type_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// -------------------------------------------------------------------

// GarbageCollectionInfoData

// repeated int64 replayed_block_failed_event_log_id = 1;
inline int GarbageCollectionInfoData::replayed_block_failed_event_log_id_size() const {
  return replayed_block_failed_event_log_id_.size();
}
inline void GarbageCollectionInfoData::clear_replayed_block_failed_event_log_id() {
  replayed_block_failed_event_log_id_.Clear();
}
inline ::google::protobuf::int64 GarbageCollectionInfoData::replayed_block_failed_event_log_id(int index) const {
  return replayed_block_failed_event_log_id_.Get(index);
}
inline void GarbageCollectionInfoData::set_replayed_block_failed_event_log_id(int index, ::google::protobuf::int64 value) {
  replayed_block_failed_event_log_id_.Set(index, value);
}
inline void GarbageCollectionInfoData::add_replayed_block_failed_event_log_id(::google::protobuf::int64 value) {
  replayed_block_failed_event_log_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GarbageCollectionInfoData::replayed_block_failed_event_log_id() const {
  return replayed_block_failed_event_log_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GarbageCollectionInfoData::mutable_replayed_block_failed_event_log_id() {
  return &replayed_block_failed_event_log_id_;
}

// -------------------------------------------------------------------

// ContainerGreedyGCCandidateItemData

// optional uint64 address = 1;
inline bool ContainerGreedyGCCandidateItemData::has_address() const {
  return _has_bit(0);
}
inline void ContainerGreedyGCCandidateItemData::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerGreedyGCCandidateItemData::address() const {
  return address_;
}
inline void ContainerGreedyGCCandidateItemData::set_address(::google::protobuf::uint64 value) {
  _set_bit(0);
  address_ = value;
}

// optional uint32 active_data_size = 2;
inline bool ContainerGreedyGCCandidateItemData::has_active_data_size() const {
  return _has_bit(1);
}
inline void ContainerGreedyGCCandidateItemData::clear_active_data_size() {
  active_data_size_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ContainerGreedyGCCandidateItemData::active_data_size() const {
  return active_data_size_;
}
inline void ContainerGreedyGCCandidateItemData::set_active_data_size(::google::protobuf::uint32 value) {
  _set_bit(1);
  active_data_size_ = value;
}

// optional uint32 active_item_count = 3;
inline bool ContainerGreedyGCCandidateItemData::has_active_item_count() const {
  return _has_bit(2);
}
inline void ContainerGreedyGCCandidateItemData::clear_active_item_count() {
  active_item_count_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ContainerGreedyGCCandidateItemData::active_item_count() const {
  return active_item_count_;
}
inline void ContainerGreedyGCCandidateItemData::set_active_item_count(::google::protobuf::uint32 value) {
  _set_bit(2);
  active_item_count_ = value;
}

// -------------------------------------------------------------------

// ContainerGreedyGCCandidateData

// repeated .ContainerGreedyGCCandidateItemData item = 1;
inline int ContainerGreedyGCCandidateData::item_size() const {
  return item_.size();
}
inline void ContainerGreedyGCCandidateData::clear_item() {
  item_.Clear();
}
inline const ::ContainerGreedyGCCandidateItemData& ContainerGreedyGCCandidateData::item(int index) const {
  return item_.Get(index);
}
inline ::ContainerGreedyGCCandidateItemData* ContainerGreedyGCCandidateData::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::ContainerGreedyGCCandidateItemData* ContainerGreedyGCCandidateData::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContainerGreedyGCCandidateItemData >&
ContainerGreedyGCCandidateData::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContainerGreedyGCCandidateItemData >*
ContainerGreedyGCCandidateData::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// ContainerStorageAddressData

// optional uint64 primary_id = 3;
inline bool ContainerStorageAddressData::has_primary_id() const {
  return _has_bit(0);
}
inline void ContainerStorageAddressData::clear_primary_id() {
  primary_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ContainerStorageAddressData::primary_id() const {
  return primary_id_;
}
inline void ContainerStorageAddressData::set_primary_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  primary_id_ = value;
}

// optional uint32 file_index = 1;
inline bool ContainerStorageAddressData::has_file_index() const {
  return _has_bit(1);
}
inline void ContainerStorageAddressData::clear_file_index() {
  file_index_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ContainerStorageAddressData::file_index() const {
  return file_index_;
}
inline void ContainerStorageAddressData::set_file_index(::google::protobuf::uint32 value) {
  _set_bit(1);
  file_index_ = value;
}

// optional uint64 file_offset = 2;
inline bool ContainerStorageAddressData::has_file_offset() const {
  return _has_bit(2);
}
inline void ContainerStorageAddressData::clear_file_offset() {
  file_offset_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 ContainerStorageAddressData::file_offset() const {
  return file_offset_;
}
inline void ContainerStorageAddressData::set_file_offset(::google::protobuf::uint64 value) {
  _set_bit(2);
  file_offset_ = value;
}

// optional uint64 log_id = 4;
inline bool ContainerStorageAddressData::has_log_id() const {
  return _has_bit(3);
}
inline void ContainerStorageAddressData::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 ContainerStorageAddressData::log_id() const {
  return log_id_;
}
inline void ContainerStorageAddressData::set_log_id(::google::protobuf::uint64 value) {
  _set_bit(3);
  log_id_ = value;
}

// -------------------------------------------------------------------

// BitmapAllocatorItemData

// optional uint32 free_count = 1;
inline bool BitmapAllocatorItemData::has_free_count() const {
  return _has_bit(0);
}
inline void BitmapAllocatorItemData::clear_free_count() {
  free_count_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 BitmapAllocatorItemData::free_count() const {
  return free_count_;
}
inline void BitmapAllocatorItemData::set_free_count(::google::protobuf::uint32 value) {
  _set_bit(0);
  free_count_ = value;
}

// optional bytes bitmap = 2;
inline bool BitmapAllocatorItemData::has_bitmap() const {
  return _has_bit(1);
}
inline void BitmapAllocatorItemData::clear_bitmap() {
  if (bitmap_ != &_default_bitmap_) {
    bitmap_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& BitmapAllocatorItemData::bitmap() const {
  return *bitmap_;
}
inline void BitmapAllocatorItemData::set_bitmap(const ::std::string& value) {
  _set_bit(1);
  if (bitmap_ == &_default_bitmap_) {
    bitmap_ = new ::std::string;
  }
  bitmap_->assign(value);
}
inline void BitmapAllocatorItemData::set_bitmap(const char* value) {
  _set_bit(1);
  if (bitmap_ == &_default_bitmap_) {
    bitmap_ = new ::std::string;
  }
  bitmap_->assign(value);
}
inline void BitmapAllocatorItemData::set_bitmap(const void* value, size_t size) {
  _set_bit(1);
  if (bitmap_ == &_default_bitmap_) {
    bitmap_ = new ::std::string;
  }
  bitmap_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitmapAllocatorItemData::mutable_bitmap() {
  _set_bit(1);
  if (bitmap_ == &_default_bitmap_) {
    bitmap_ = new ::std::string;
  }
  return bitmap_;
}

// -------------------------------------------------------------------

// ContainerTrackerData

// repeated uint64 container_id = 1 [packed = true];
inline int ContainerTrackerData::container_id_size() const {
  return container_id_.size();
}
inline void ContainerTrackerData::clear_container_id() {
  container_id_.Clear();
}
inline ::google::protobuf::uint64 ContainerTrackerData::container_id(int index) const {
  return container_id_.Get(index);
}
inline void ContainerTrackerData::set_container_id(int index, ::google::protobuf::uint64 value) {
  container_id_.Set(index, value);
}
inline void ContainerTrackerData::add_container_id(::google::protobuf::uint64 value) {
  container_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ContainerTrackerData::container_id() const {
  return container_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ContainerTrackerData::mutable_container_id() {
  return &container_id_;
}

// optional uint64 highest_seen_container_id = 2;
inline bool ContainerTrackerData::has_highest_seen_container_id() const {
  return _has_bit(1);
}
inline void ContainerTrackerData::clear_highest_seen_container_id() {
  highest_seen_container_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 ContainerTrackerData::highest_seen_container_id() const {
  return highest_seen_container_id_;
}
inline void ContainerTrackerData::set_highest_seen_container_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  highest_seen_container_id_ = value;
}

// -------------------------------------------------------------------

// LogReplayIDData

// optional int64 replay_id = 1;
inline bool LogReplayIDData::has_replay_id() const {
  return _has_bit(0);
}
inline void LogReplayIDData::clear_replay_id() {
  replay_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 LogReplayIDData::replay_id() const {
  return replay_id_;
}
inline void LogReplayIDData::set_replay_id(::google::protobuf::int64 value) {
  _set_bit(0);
  replay_id_ = value;
}

// -------------------------------------------------------------------

// LogLogIDData

// optional int64 log_id = 1;
inline bool LogLogIDData::has_log_id() const {
  return _has_bit(0);
}
inline void LogLogIDData::clear_log_id() {
  log_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 LogLogIDData::log_id() const {
  return log_id_;
}
inline void LogLogIDData::set_log_id(::google::protobuf::int64 value) {
  _set_bit(0);
  log_id_ = value;
}

// -------------------------------------------------------------------

// LogStateData

// optional int64 limit_id = 1;
inline bool LogStateData::has_limit_id() const {
  return _has_bit(0);
}
inline void LogStateData::clear_limit_id() {
  limit_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 LogStateData::limit_id() const {
  return limit_id_;
}
inline void LogStateData::set_limit_id(::google::protobuf::int64 value) {
  _set_bit(0);
  limit_id_ = value;
}

// optional int64 log_entry_width = 2;
inline bool LogStateData::has_log_entry_width() const {
  return _has_bit(1);
}
inline void LogStateData::clear_log_entry_width() {
  log_entry_width_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 LogStateData::log_entry_width() const {
  return log_entry_width_;
}
inline void LogStateData::set_log_entry_width(::google::protobuf::int64 value) {
  _set_bit(1);
  log_entry_width_ = value;
}

// -------------------------------------------------------------------

// MessageData

// optional string message = 1;
inline bool MessageData::has_message() const {
  return _has_bit(0);
}
inline void MessageData::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MessageData::message() const {
  return *message_;
}
inline void MessageData::set_message(const ::std::string& value) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void MessageData::set_message(const char* value) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void MessageData::set_message(const char* value, size_t size) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageData::mutable_message() {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// BlockWriteFailedData


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GarbageCollectionCandidateItemData_Type>() {
  return ::GarbageCollectionCandidateItemData_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< CompressionMode>() {
  return CompressionMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dedupv1_2eproto__INCLUDED
